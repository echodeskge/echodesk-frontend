/**
 * THIS FILE IS AUTOMATICALLY GENERATED FROM: https://api.echodesk.ge/api/schema
 * DO NOT EDIT MANUALLY
 */

export interface ActionEnum {
  [key: string]: any;
}

export interface BulkUserAction {
  user_ids: number[];
  action: ActionEnum;
  role?: RoleEnum;
  status?: Status336enum;
}

export interface CallEvent {
  id: number;
  event_type: EventTypeEnum;
  timestamp: string;
  metadata?: any;
  user?: number;
  user_name: string;
}

export interface CallInitiate {
  recipient_number: string;
  call_type?: CallTypeEnum;
  sip_configuration?: number;
}

export interface CallLog {
  id: number;
  call_id: string;
  caller_number: string;
  recipient_number: string;
  direction?: DirectionEnum;
  call_type?: CallTypeEnum;
  started_at: string;
  answered_at?: string;
  ended_at?: string;
  duration?: string;
  duration_display: string;
  status?: StatusB9eEnum;
  notes?: string;
  sip_call_id?: string;
  client: number;
  client_name: string;
  handled_by?: number;
  handled_by_name: string;
  sip_configuration?: number;
  sip_config_name: string;
  recording_url?: string;
  call_quality_score?: number;
  created_at: string;
  updated_at: string;
}

export interface CallLogCreate {
  caller_number: string;
  recipient_number: string;
  direction?: DirectionEnum;
  call_type?: CallTypeEnum;
  sip_call_id?: string;
  sip_configuration?: number;
  notes?: string;
}

export interface CallLogDetail {
  id: number;
  call_id: string;
  caller_number: string;
  recipient_number: string;
  direction?: DirectionEnum;
  call_type?: CallTypeEnum;
  started_at: string;
  answered_at?: string;
  ended_at?: string;
  duration?: string;
  duration_display: string;
  status?: StatusB9eEnum;
  notes?: string;
  sip_call_id?: string;
  client: number;
  client_name: string;
  handled_by?: number;
  handled_by_name: string;
  sip_configuration?: number;
  sip_config_name: string;
  recording_url?: string;
  call_quality_score?: number;
  created_at: string;
  updated_at: string;
  events: CallEvent[];
  recording: CallRecording;
}

export interface CallRecording {
  id: number;
  recording_id: string;
  file_path?: string;
  file_url?: string;
  file_size?: number;
  file_size_display: string;
  duration?: string;
  duration_display: string;
  format?: string;
  status?: CallRecordingStatusEnum;
  started_at?: string;
  completed_at?: string;
  transcript?: string;
  transcript_confidence?: number;
  created_at: string;
  updated_at: string;
}

export interface CallRecordingStatusEnum {
  [key: string]: any;
}

export interface CallStatusUpdate {
  status: StatusB9eEnum;
  notes?: string;
  call_quality_score?: number;
  recording_url?: string;
}

export interface CallTypeEnum {
  [key: string]: any;
}

export interface Client {
  id: number;
  name: string;
  email: string;
  phone?: string;
  company?: string;
  created_at: string;
  updated_at: string;
  is_active?: boolean;
}

export interface DeploymentStatusEnum {
  [key: string]: any;
}

export interface DirectionEnum {
  [key: string]: any;
}

export interface EventTypeEnum {
  [key: string]: any;
}

export interface Group {
  id: number;
  name: string;
  user_count: string;
  users: string[];
}

export interface GroupCreate {
  name: string;
}

export interface GroupUpdate {
  name: string;
}

export interface KanbanBoard {
  columns: TicketColumn[];
  tickets_by_column: string;
}

export interface PaginatedCallLogList {
  count: number;
  next?: string;
  previous?: string;
  results: CallLog[];
}

export interface PaginatedClientList {
  count: number;
  next?: string;
  previous?: string;
  results: Client[];
}

export interface PaginatedGroupList {
  count: number;
  next?: string;
  previous?: string;
  results: Group[];
}

export interface PaginatedSipConfigurationListList {
  count: number;
  next?: string;
  previous?: string;
  results: SipConfigurationList[];
}

export interface PaginatedTagList {
  count: number;
  next?: string;
  previous?: string;
  results: Tag[];
}

export interface PaginatedTenantList {
  count: number;
  next?: string;
  previous?: string;
  results: Tenant[];
}

export interface PaginatedTicketColumnList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketColumn[];
}

export interface PaginatedTicketCommentList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketComment[];
}

export interface PaginatedTicketListList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketList[];
}

export interface PaginatedUserList {
  count: number;
  next?: string;
  previous?: string;
  results: User[];
}

export interface PasswordChange {
  old_password: string;
  new_password: string;
  new_password_confirm: string;
}

export interface PatchedCallLog {
  id?: number;
  call_id?: string;
  caller_number?: string;
  recipient_number?: string;
  direction?: DirectionEnum;
  call_type?: CallTypeEnum;
  started_at?: string;
  answered_at?: string;
  ended_at?: string;
  duration?: string;
  duration_display?: string;
  status?: StatusB9eEnum;
  notes?: string;
  sip_call_id?: string;
  client?: number;
  client_name?: string;
  handled_by?: number;
  handled_by_name?: string;
  sip_configuration?: number;
  sip_config_name?: string;
  recording_url?: string;
  call_quality_score?: number;
  created_at?: string;
  updated_at?: string;
}

export interface PatchedCallStatusUpdate {
  status?: StatusB9eEnum;
  notes?: string;
  call_quality_score?: number;
  recording_url?: string;
}

export interface PatchedClient {
  id?: number;
  name?: string;
  email?: string;
  phone?: string;
  company?: string;
  created_at?: string;
  updated_at?: string;
  is_active?: boolean;
}

export interface PatchedGroupUpdate {
  name?: string;
}

export interface PatchedSipConfiguration {
  id?: number;
  name?: string;
  sip_server?: string;
  sip_port?: number;
  username?: string;
  realm?: string;
  proxy?: string;
  stun_server?: string;
  turn_server?: string;
  turn_username?: string;
  is_active?: boolean;
  is_default?: boolean;
  max_concurrent_calls?: number;
  created_at?: string;
  updated_at?: string;
}

export interface PatchedTag {
  id?: number;
  name?: string;
  created_at?: string;
}

export interface PatchedTenant {
  id?: number;
  schema_name?: string;
  domain_url?: string;
  name?: string;
  description?: string;
  admin_email?: string;
  admin_name?: string;
  plan?: PlanEnum;
  max_users?: number;
  max_storage?: number;
  preferred_language?: PreferredLanguageEnum;
  frontend_url?: string;
  deployment_status?: DeploymentStatusEnum;
  is_active?: boolean;
  created_on?: string;
}

export interface PatchedTicket {
  id?: number;
  title?: string;
  description?: string;
  status?: Status14bEnum;
  priority?: PriorityEnum;
  column?: TicketColumn;
  column_id?: number;
  position_in_column?: number;
  created_at?: string;
  updated_at?: string;
  created_by?: UserMinimal;
  assigned_to?: UserMinimal;
  assigned_to_id?: number;
  tags?: Tag[];
  tag_ids?: number[];
  comments?: TicketComment[];
  comments_count?: string;
}

export interface PatchedTicketColumnUpdate {
  name?: string;
  description?: string;
  color?: string;
  position?: number;
  is_default?: boolean;
  is_closed_status?: boolean;
}

export interface PatchedTicketComment {
  id?: number;
  ticket?: number;
  user?: UserMinimal;
  user_id?: number;
  comment?: string;
  created_at?: string;
  updated_at?: string;
}

export interface PatchedUser {
  id?: number;
  email?: string;
  first_name?: string;
  last_name?: string;
  full_name?: string;
  role?: RoleEnum;
  status?: Status336enum;
  department?: string;
  phone_number?: string;
  job_title?: string;
  can_view_all_tickets?: boolean;
  can_manage_users?: boolean;
  can_make_calls?: boolean;
  can_manage_groups?: boolean;
  can_manage_settings?: boolean;
  is_active?: boolean;
  is_staff?: boolean;
  date_joined?: string;
  last_login?: string;
  invited_by?: number;
  invitation_sent_at?: string;
  permissions?: string;
}

export interface PatchedUserUpdate {
  first_name?: string;
  last_name?: string;
  role?: RoleEnum;
  status?: Status336enum;
  department?: string;
  phone_number?: string;
  job_title?: string;
  can_view_all_tickets?: boolean;
  can_manage_users?: boolean;
  can_make_calls?: boolean;
  can_manage_groups?: boolean;
  can_manage_settings?: boolean;
  is_active?: boolean;
}

export interface PlanEnum {
  [key: string]: any;
}

export interface PreferredLanguageEnum {
  [key: string]: any;
}

export interface PriorityEnum {
  [key: string]: any;
}

export interface RoleEnum {
  [key: string]: any;
}

export interface SipConfiguration {
  id: number;
  name: string;
  sip_server: string;
  sip_port?: number;
  username: string;
  realm?: string;
  proxy?: string;
  stun_server?: string;
  turn_server?: string;
  turn_username?: string;
  is_active?: boolean;
  is_default?: boolean;
  max_concurrent_calls?: number;
  created_at: string;
  updated_at: string;
}

export interface SipConfigurationDetail {
  id: number;
  name: string;
  sip_server: string;
  sip_port?: number;
  username: string;
  password: string;
  realm?: string;
  proxy?: string;
  stun_server?: string;
  turn_server?: string;
  turn_username?: string;
  turn_password?: string;
  is_active?: boolean;
  is_default?: boolean;
  max_concurrent_calls?: number;
}

export interface SipConfigurationList {
  id: number;
  name: string;
  sip_server: string;
  is_active?: boolean;
  is_default?: boolean;
}

export interface Status14bEnum {
  [key: string]: any;
}

export interface Status336enum {
  [key: string]: any;
}

export interface StatusB9eEnum {
  [key: string]: any;
}

export interface Tag {
  id: number;
  name: string;
  created_at: string;
}

export interface Tenant {
  id: number;
  schema_name: string;
  domain_url: string;
  name: string;
  description?: string;
  admin_email: string;
  admin_name: string;
  plan?: PlanEnum;
  max_users?: number;
  max_storage?: number;
  preferred_language?: PreferredLanguageEnum;
  frontend_url?: string;
  deployment_status?: DeploymentStatusEnum;
  is_active?: boolean;
  created_on: string;
}

export interface TenantCreate {
  name: string;
  description?: string;
  admin_email: string;
  admin_name: string;
  plan?: PlanEnum;
  max_users?: number;
  max_storage?: number;
  preferred_language?: PreferredLanguageEnum;
  domain: string;
}

export interface TenantDashboardData {
  tenant_info: string;
  user_info: string;
  statistics: string;
}

export interface TenantLogin {
  email: string;
  password: string;
}

export interface TenantRegistration {
  company_name: string;
  domain: string;
  description?: string;
  admin_email: string;
  admin_password: string;
  admin_first_name: string;
  admin_last_name: string;
  preferred_language?: PreferredLanguageEnum;
}

export interface Ticket {
  id: number;
  title: string;
  description: string;
  status?: Status14bEnum;
  priority?: PriorityEnum;
  column: TicketColumn;
  column_id?: number;
  position_in_column?: number;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  assigned_to: UserMinimal;
  assigned_to_id?: number;
  tags: Tag[];
  tag_ids?: number[];
  comments: TicketComment[];
  comments_count: string;
}

export interface TicketColumn {
  id: number;
  name: string;
  description?: string;
  color?: string;
  position?: number;
  is_default?: boolean;
  is_closed_status?: boolean;
  created_at: string;
  updated_at: string;
  created_by: string;
  tickets_count: string;
}

export interface TicketColumnCreate {
  name: string;
  description?: string;
  color?: string;
  position?: number;
  is_default?: boolean;
  is_closed_status?: boolean;
}

export interface TicketColumnUpdate {
  name: string;
  description?: string;
  color?: string;
  position?: number;
  is_default?: boolean;
  is_closed_status?: boolean;
}

export interface TicketComment {
  id: number;
  ticket: number;
  user: UserMinimal;
  user_id?: number;
  comment: string;
  created_at: string;
  updated_at: string;
}

export interface TicketList {
  id: number;
  title: string;
  status: Status14bEnum;
  priority: PriorityEnum;
  column: TicketColumn;
  position_in_column: number;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  assigned_to: UserMinimal;
  tags: Tag[];
  comments_count: string;
}

export interface User {
  id: number;
  email: string;
  first_name?: string;
  last_name?: string;
  full_name: string;
  role?: RoleEnum;
  status?: Status336enum;
  department?: string;
  phone_number?: string;
  job_title?: string;
  can_view_all_tickets?: boolean;
  can_manage_users?: boolean;
  can_make_calls?: boolean;
  can_manage_groups?: boolean;
  can_manage_settings?: boolean;
  is_active?: boolean;
  is_staff?: boolean;
  date_joined: string;
  last_login: string;
  invited_by: number;
  invitation_sent_at: string;
  permissions: string;
}

export interface UserCreate {
  email: string;
  first_name?: string;
  last_name?: string;
  password: string;
  password_confirm: string;
  role?: RoleEnum;
  department?: string;
  phone_number?: string;
  job_title?: string;
  can_view_all_tickets?: boolean;
  can_manage_users?: boolean;
  can_make_calls?: boolean;
  can_manage_groups?: boolean;
  can_manage_settings?: boolean;
}

export interface UserMinimal {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
}

export interface UserUpdate {
  first_name?: string;
  last_name?: string;
  role?: RoleEnum;
  status?: Status336enum;
  department?: string;
  phone_number?: string;
  job_title?: string;
  can_view_all_tickets?: boolean;
  can_manage_users?: boolean;
  can_make_calls?: boolean;
  can_manage_groups?: boolean;
  can_manage_settings?: boolean;
  is_active?: boolean;
}
