/**
 * THIS FILE IS AUTOMATICALLY GENERATED FROM: https://api.echodesk.ge/api/schema
 * DO NOT EDIT MANUALLY
 */

export interface BillingPeriodEnum {
  [key: string]: any;
}

export interface Board {
  id: number;
  name: string;
  description?: string;
  is_default?: boolean;
  created_at: string;
  updated_at: string;
  created_by: string;
  columns_count: string;
  order_users: UserMinimal[];
  order_user_ids?: number[];
  board_groups: TenantGroupMinimal[];
  board_group_ids?: number[];
  board_users: UserMinimal[];
  board_user_ids?: number[];
  payment_summary: string;
}

export interface CallEvent {
  id: number;
  event_type: EventTypeEnum;
  timestamp: string;
  metadata?: any;
  user?: number;
  user_name: string;
}

export interface CallInitiate {
  recipient_number: string;
  call_type?: CallTypeEnum;
  sip_configuration?: number;
}

export interface CallLog {
  id: number;
  call_id: string;
  caller_number: string;
  recipient_number: string;
  direction?: DirectionEnum;
  call_type?: CallTypeEnum;
  started_at: string;
  answered_at?: string;
  ended_at?: string;
  duration?: string;
  duration_display: string;
  status?: StatusB9eEnum;
  notes?: string;
  sip_call_id?: string;
  client: number;
  client_name: string;
  handled_by?: number;
  handled_by_name: string;
  sip_configuration?: number;
  sip_config_name: string;
  recording_url?: string;
  call_quality_score?: number;
  created_at: string;
  updated_at: string;
}

export interface CallLogCreate {
  caller_number: string;
  recipient_number: string;
  direction?: DirectionEnum;
  call_type?: CallTypeEnum;
  sip_call_id?: string;
  sip_configuration?: number;
  notes?: string;
}

export interface CallLogDetail {
  id: number;
  call_id: string;
  caller_number: string;
  recipient_number: string;
  direction?: DirectionEnum;
  call_type?: CallTypeEnum;
  started_at: string;
  answered_at?: string;
  ended_at?: string;
  duration?: string;
  duration_display: string;
  status?: StatusB9eEnum;
  notes?: string;
  sip_call_id?: string;
  client: number;
  client_name: string;
  handled_by?: number;
  handled_by_name: string;
  sip_configuration?: number;
  sip_config_name: string;
  recording_url?: string;
  call_quality_score?: number;
  created_at: string;
  updated_at: string;
  events: CallEvent[];
  recording: CallRecording;
}

export interface CallRecording {
  id: number;
  recording_id: string;
  file_path?: string;
  file_url?: string;
  file_size?: number;
  file_size_display: string;
  duration?: string;
  duration_display: string;
  format?: string;
  status?: CallRecordingStatusEnum;
  started_at?: string;
  completed_at?: string;
  transcript?: string;
  transcript_confidence?: number;
  created_at: string;
  updated_at: string;
}

export interface CallRecordingStatusEnum {
  [key: string]: any;
}

export interface CallStatusUpdate {
  status: StatusB9eEnum;
  notes?: string;
  call_quality_score?: number;
  recording_url?: string;
}

export interface CallTypeEnum {
  [key: string]: any;
}

export interface ChecklistItem {
  id: number;
  ticket?: number;
  sub_ticket?: number;
  text: string;
  is_checked?: boolean;
  position?: number;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
}

export interface Client {
  id: number;
  name: string;
  email: string;
  phone?: string;
  company?: string;
  created_at: string;
  updated_at: string;
  is_active?: boolean;
}

export interface Department {
  id: number;
  name: string;
  description?: string;
  is_active?: boolean;
  employee_count: string;
  created_at: string;
  updated_at: string;
}

export interface DeploymentStatusEnum {
  [key: string]: any;
}

export interface DescriptionFormatEnum {
  [key: string]: any;
}

export interface DirectionEnum {
  [key: string]: any;
}

export interface EventTypeEnum {
  [key: string]: any;
}

export interface FacebookMessage {
  id: number;
  message_id: string;
  sender_id: string;
  sender_name?: string;
  profile_pic_url?: string;
  message_text: string;
  timestamp: string;
  is_from_page?: boolean;
  page_name: string;
  created_at: string;
}

export interface FacebookPageConnection {
  id: number;
  page_id: string;
  page_name: string;
  is_active?: boolean;
  created_at: string;
  updated_at: string;
}

export interface FacebookSendMessage {
  recipient_id: string;
  message: string;
  page_id: string;
}

export interface Group {
  id: number;
  name: string;
  permissions: Permission[];
  permission_ids?: number[];
  user_count: string;
}

export interface GroupCreate {
  name: string;
  permission_ids?: number[];
}

export interface ItemList {
  id: number;
  title: string;
  description?: string;
  is_active?: boolean;
  parent_list?: number;
  custom_fields_schema?: any;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  items: ListItem[];
  items_count: string;
  root_items: string;
}

export interface ItemListMinimal {
  id: number;
  title: string;
  description: string;
  is_active: boolean;
  parent_list: number;
  custom_fields_schema: any;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  items_count: string;
}

export interface KanbanBoard {
  columns: TicketColumn[];
  tickets_by_column: string;
}

export interface ListItem {
  id: number;
  item_list: number;
  label: string;
  custom_id?: string;
  parent?: number;
  parent_list_item?: number;
  position?: number;
  is_active?: boolean;
  custom_data?: any;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  children: string;
  full_path: string;
}

export interface ListItemMinimal {
  id: number;
  item_list: number;
  label: string;
  custom_id: string;
  parent: number;
  position: number;
  is_active: boolean;
  full_path: string;
}

export interface Notification {
  id: number;
  user: number;
  user_name: string;
  notification_type: NotificationTypeEnum;
  title: string;
  message: string;
  ticket_id?: number;
  metadata?: any;
  is_read?: boolean;
  read_at: string;
  created_at: string;
  time_ago: string;
}

export interface NotificationTypeEnum {
  [key: string]: any;
}

export interface Package {
  id: number;
  name: string;
  display_name: string;
  description: string;
  pricing_model?: PricingModelEnum;
  price_gel: string;
  billing_period?: BillingPeriodEnum;
  max_users?: number;
  max_whatsapp_messages: number;
  max_storage_gb?: number;
  ticket_management?: boolean;
  email_integration?: boolean;
  sip_calling?: boolean;
  facebook_integration?: boolean;
  instagram_integration?: boolean;
  whatsapp_integration?: boolean;
  advanced_analytics?: boolean;
  api_access?: boolean;
  custom_integrations?: boolean;
  priority_support?: boolean;
  dedicated_account_manager?: boolean;
  is_highlighted?: boolean;
  is_active?: boolean;
  sort_order?: number;
  features_list: string;
}

export interface PackageList {
  id: number;
  name: string;
  display_name: string;
  description: string;
  pricing_model?: PricingModelEnum;
  price_gel: string;
  max_users?: number;
  max_whatsapp_messages: number;
  max_storage_gb?: number;
  is_highlighted?: boolean;
  features_list: string;
  pricing_suffix: string;
}

export interface PaginatedBoardList {
  count: number;
  next?: string;
  previous?: string;
  results: Board[];
}

export interface PaginatedCallLogList {
  count: number;
  next?: string;
  previous?: string;
  results: CallLog[];
}

export interface PaginatedChecklistItemList {
  count: number;
  next?: string;
  previous?: string;
  results: ChecklistItem[];
}

export interface PaginatedClientList {
  count: number;
  next?: string;
  previous?: string;
  results: Client[];
}

export interface PaginatedDepartmentList {
  count: number;
  next?: string;
  previous?: string;
  results: Department[];
}

export interface PaginatedFacebookMessageList {
  count: number;
  next?: string;
  previous?: string;
  results: FacebookMessage[];
}

export interface PaginatedFacebookPageConnectionList {
  count: number;
  next?: string;
  previous?: string;
  results: FacebookPageConnection[];
}

export interface PaginatedGroupList {
  count: number;
  next?: string;
  previous?: string;
  results: Group[];
}

export interface PaginatedItemListMinimalList {
  count: number;
  next?: string;
  previous?: string;
  results: ItemListMinimal[];
}

export interface PaginatedListItemMinimalList {
  count: number;
  next?: string;
  previous?: string;
  results: ListItemMinimal[];
}

export interface PaginatedNotificationList {
  count: number;
  next?: string;
  previous?: string;
  results: Notification[];
}

export interface PaginatedPackageListList {
  count: number;
  next?: string;
  previous?: string;
  results: PackageList[];
}

export interface PaginatedPermissionList {
  count: number;
  next?: string;
  previous?: string;
  results: Permission[];
}

export interface PaginatedSipConfigurationListList {
  count: number;
  next?: string;
  previous?: string;
  results: SipConfigurationList[];
}

export interface PaginatedSubTicketAssignmentList {
  count: number;
  next?: string;
  previous?: string;
  results: SubTicketAssignment[];
}

export interface PaginatedSubTicketList {
  count: number;
  next?: string;
  previous?: string;
  results: SubTicket[];
}

export interface PaginatedTagList {
  count: number;
  next?: string;
  previous?: string;
  results: Tag[];
}

export interface PaginatedTenantGroupList {
  count: number;
  next?: string;
  previous?: string;
  results: TenantGroup[];
}

export interface PaginatedTenantList {
  count: number;
  next?: string;
  previous?: string;
  results: Tenant[];
}

export interface PaginatedTicketAssignmentList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketAssignment[];
}

export interface PaginatedTicketAttachmentList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketAttachment[];
}

export interface PaginatedTicketColumnList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketColumn[];
}

export interface PaginatedTicketCommentList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketComment[];
}

export interface PaginatedTicketFormMinimalList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketFormMinimal[];
}

export interface PaginatedTicketFormSubmissionList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketFormSubmission[];
}

export interface PaginatedTicketListList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketList[];
}

export interface PaginatedTicketPaymentList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketPayment[];
}

export interface PaginatedTicketTimeLogList {
  count: number;
  next?: string;
  previous?: string;
  results: TicketTimeLog[];
}

export interface PaginatedUserList {
  count: number;
  next?: string;
  previous?: string;
  results: User[];
}

export interface PatchedBoard {
  id?: number;
  name?: string;
  description?: string;
  is_default?: boolean;
  created_at?: string;
  updated_at?: string;
  created_by?: string;
  columns_count?: string;
  order_users?: UserMinimal[];
  order_user_ids?: number[];
  board_groups?: TenantGroupMinimal[];
  board_group_ids?: number[];
  board_users?: UserMinimal[];
  board_user_ids?: number[];
  payment_summary?: string;
}

export interface PatchedCallLog {
  id?: number;
  call_id?: string;
  caller_number?: string;
  recipient_number?: string;
  direction?: DirectionEnum;
  call_type?: CallTypeEnum;
  started_at?: string;
  answered_at?: string;
  ended_at?: string;
  duration?: string;
  duration_display?: string;
  status?: StatusB9eEnum;
  notes?: string;
  sip_call_id?: string;
  client?: number;
  client_name?: string;
  handled_by?: number;
  handled_by_name?: string;
  sip_configuration?: number;
  sip_config_name?: string;
  recording_url?: string;
  call_quality_score?: number;
  created_at?: string;
  updated_at?: string;
}

export interface PatchedCallStatusUpdate {
  status?: StatusB9eEnum;
  notes?: string;
  call_quality_score?: number;
  recording_url?: string;
}

export interface PatchedChecklistItem {
  id?: number;
  ticket?: number;
  sub_ticket?: number;
  text?: string;
  is_checked?: boolean;
  position?: number;
  created_at?: string;
  updated_at?: string;
  created_by?: UserMinimal;
}

export interface PatchedClient {
  id?: number;
  name?: string;
  email?: string;
  phone?: string;
  company?: string;
  created_at?: string;
  updated_at?: string;
  is_active?: boolean;
}

export interface PatchedDepartment {
  id?: number;
  name?: string;
  description?: string;
  is_active?: boolean;
  employee_count?: string;
  created_at?: string;
  updated_at?: string;
}

export interface PatchedFacebookPageConnection {
  id?: number;
  page_id?: string;
  page_name?: string;
  is_active?: boolean;
  created_at?: string;
  updated_at?: string;
}

export interface PatchedGroup {
  id?: number;
  name?: string;
  permissions?: Permission[];
  permission_ids?: number[];
  user_count?: string;
}

export interface PatchedItemList {
  id?: number;
  title?: string;
  description?: string;
  is_active?: boolean;
  parent_list?: number;
  custom_fields_schema?: any;
  created_at?: string;
  updated_at?: string;
  created_by?: UserMinimal;
  items?: ListItem[];
  items_count?: string;
  root_items?: string;
}

export interface PatchedListItem {
  id?: number;
  item_list?: number;
  label?: string;
  custom_id?: string;
  parent?: number;
  parent_list_item?: number;
  position?: number;
  is_active?: boolean;
  custom_data?: any;
  created_at?: string;
  updated_at?: string;
  created_by?: UserMinimal;
  children?: string;
  full_path?: string;
}

export interface PatchedNotification {
  id?: number;
  user?: number;
  user_name?: string;
  notification_type?: NotificationTypeEnum;
  title?: string;
  message?: string;
  ticket_id?: number;
  metadata?: any;
  is_read?: boolean;
  read_at?: string;
  created_at?: string;
  time_ago?: string;
}

export interface PatchedSipConfiguration {
  id?: number;
  name?: string;
  sip_server?: string;
  sip_port?: number;
  username?: string;
  realm?: string;
  proxy?: string;
  stun_server?: string;
  turn_server?: string;
  turn_username?: string;
  is_active?: boolean;
  is_default?: boolean;
  max_concurrent_calls?: number;
  created_at?: string;
  updated_at?: string;
}

export interface PatchedSubTicket {
  id?: number;
  parent_ticket?: number;
  title?: string;
  description?: string;
  rich_description?: any;
  description_format?: DescriptionFormatEnum;
  priority?: PriorityEnum;
  is_completed?: boolean;
  position?: number;
  created_at?: string;
  updated_at?: string;
  created_by?: UserMinimal;
  assigned_to?: UserMinimal;
  assigned_to_id?: number;
  assigned_users?: UserMinimal[];
  assignments?: SubTicketAssignment[];
  assigned_user_ids?: number[];
  assignment_roles?: Record<string, any>;
  checklist_items?: ChecklistItem[];
  checklist_items_count?: string;
  completed_items_count?: string;
}

export interface PatchedSubTicketAssignment {
  id?: number;
  user?: UserMinimal;
  role?: Role451enum;
  assigned_at?: string;
  assigned_by?: UserMinimal;
}

export interface PatchedTag {
  id?: number;
  name?: string;
  color?: string;
  description?: string;
  created_at?: string;
  created_by?: UserMinimal;
}

export interface PatchedTenant {
  id?: number;
  schema_name?: string;
  domain_url?: string;
  name?: string;
  description?: string;
  admin_email?: string;
  admin_name?: string;
  plan?: PlanEnum;
  max_users?: number;
  max_storage?: number;
  preferred_language?: PreferredLanguageEnum;
  frontend_url?: string;
  deployment_status?: DeploymentStatusEnum;
  is_active?: boolean;
  created_on?: string;
}

export interface PatchedTenantGroup {
  id?: number;
  name?: string;
  description?: string;
  is_active?: boolean;
  created_at?: string;
  updated_at?: string;
  member_count?: string;
  can_view_all_tickets?: boolean;
  can_manage_users?: boolean;
  can_make_calls?: boolean;
  can_manage_groups?: boolean;
  can_manage_settings?: boolean;
  can_create_tickets?: boolean;
  can_edit_own_tickets?: boolean;
  can_edit_all_tickets?: boolean;
  can_delete_tickets?: boolean;
  can_assign_tickets?: boolean;
  can_view_reports?: boolean;
  can_export_data?: boolean;
  can_manage_tags?: boolean;
  can_manage_columns?: boolean;
  can_view_boards?: boolean;
  can_create_boards?: boolean;
  can_edit_boards?: boolean;
  can_delete_boards?: boolean;
  can_access_orders?: boolean;
}

export interface PatchedTicket {
  id?: number;
  title?: string;
  description?: string;
  rich_description?: any;
  description_format?: DescriptionFormatEnum;
  status?: string;
  priority?: PriorityEnum;
  is_closed?: string;
  is_order?: boolean;
  column?: TicketColumn;
  column_id?: number;
  position_in_column?: number;
  created_at?: string;
  updated_at?: string;
  created_by?: UserMinimal;
  assigned_to?: UserMinimal;
  assigned_to_id?: number;
  assigned_users?: UserMinimal[];
  assignments?: TicketAssignment[];
  assigned_user_ids?: number[];
  assignment_roles?: Record<string, any>;
  assigned_groups?: TenantGroupMinimal[];
  assigned_group_ids?: number[];
  tags?: Tag[];
  tag_ids?: number[];
  comments?: TicketComment[];
  comments_count?: string;
  sub_tickets?: SubTicket[];
  sub_tickets_count?: string;
  completed_sub_tickets_count?: string;
  checklist_items?: ChecklistItem[];
  checklist_items_count?: string;
  completed_checklist_items_count?: string;
  price?: string;
  currency?: string;
  is_paid?: boolean;
  amount_paid?: string;
  payment_due_date?: string;
  payments?: TicketPayment[];
  remaining_balance?: string;
  payment_status?: string;
  is_overdue?: string;
  form_submissions?: string;
}

export interface PatchedTicketAssignment {
  id?: number;
  user?: UserMinimal;
  role?: Role451enum;
  assigned_at?: string;
  assigned_by?: UserMinimal;
}

export interface PatchedTicketAttachment {
  id?: number;
  ticket?: number;
  file?: string;
  file_url?: string;
  filename?: string;
  file_size?: number;
  content_type?: string;
  uploaded_by?: UserMinimal;
  uploaded_at?: string;
}

export interface PatchedTicketColumnUpdate {
  name?: string;
  description?: string;
  color?: string;
  position?: number;
  is_default?: boolean;
  is_closed_status?: boolean;
  track_time?: boolean;
  board?: number;
}

export interface PatchedTicketComment {
  id?: number;
  ticket?: number;
  user?: UserMinimal;
  user_id?: number;
  comment?: string;
  created_at?: string;
  updated_at?: string;
}

export interface PatchedTicketForm {
  id?: number;
  title?: string;
  description?: string;
  parent_form?: TicketFormMinimal;
  parent_form_id?: number;
  child_forms?: TicketFormMinimal[];
  child_forms_count?: string;
  item_lists?: ItemListMinimal[];
  item_list_ids?: number[];
  form_config?: any;
  custom_fields?: any;
  is_default?: boolean;
  is_active?: boolean;
  created_at?: string;
  updated_at?: string;
  created_by?: UserMinimal;
  submissions_count?: string;
}

export interface PatchedTicketFormSubmission {
  id?: number;
  ticket?: number;
  form?: TicketFormMinimal;
  form_id?: number;
  selected_items?: ListItemMinimal[];
  selected_item_ids?: number[];
  form_data?: any;
  submitted_at?: string;
  submitted_by?: UserMinimal;
  ticket_data?: string;
}

export interface PatchedTicketPayment {
  id?: number;
  ticket?: number;
  amount?: string;
  currency?: string;
  payment_method?: PaymentMethodEnum;
  payment_reference?: string;
  notes?: string;
  processed_by?: UserMinimal;
  processed_at?: string;
}

export interface PatchedUserUpdate {
  first_name?: string;
  last_name?: string;
  role?: Role4c6enum;
  status?: Status336enum;
  phone_number?: string;
  job_title?: string;
  is_active?: boolean;
  group_ids?: number[];
  tenant_group_ids?: number[];
  user_permission_ids?: number[];
}

export interface PaymentMethodEnum {
  [key: string]: any;
}

export interface Permission {
  id: number;
  name: string;
  codename: string;
  content_type: number;
  app_label: string;
  model: string;
}

export interface PlanEnum {
  [key: string]: any;
}

export interface PreferredLanguageEnum {
  [key: string]: any;
}

export interface PricingModelEnum {
  [key: string]: any;
}

export interface PriorityEnum {
  [key: string]: any;
}

export interface Role451enum {
  [key: string]: any;
}

export interface Role4c6enum {
  [key: string]: any;
}

export interface SipConfiguration {
  id: number;
  name: string;
  sip_server: string;
  sip_port?: number;
  username: string;
  realm?: string;
  proxy?: string;
  stun_server?: string;
  turn_server?: string;
  turn_username?: string;
  is_active?: boolean;
  is_default?: boolean;
  max_concurrent_calls?: number;
  created_at: string;
  updated_at: string;
}

export interface SipConfigurationDetail {
  id: number;
  name: string;
  sip_server: string;
  sip_port?: number;
  username: string;
  password: string;
  realm?: string;
  proxy?: string;
  stun_server?: string;
  turn_server?: string;
  turn_username?: string;
  turn_password?: string;
  is_active?: boolean;
  is_default?: boolean;
  max_concurrent_calls?: number;
}

export interface SipConfigurationList {
  id: number;
  name: string;
  sip_server: string;
  is_active?: boolean;
  is_default?: boolean;
}

export interface Status336enum {
  [key: string]: any;
}

export interface StatusB9eEnum {
  [key: string]: any;
}

export interface SubTicket {
  id: number;
  parent_ticket: number;
  title: string;
  description?: string;
  rich_description?: any;
  description_format?: DescriptionFormatEnum;
  priority?: PriorityEnum;
  is_completed?: boolean;
  position?: number;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  assigned_to: UserMinimal;
  assigned_to_id?: number;
  assigned_users: UserMinimal[];
  assignments: SubTicketAssignment[];
  assigned_user_ids?: number[];
  assignment_roles?: Record<string, any>;
  checklist_items: ChecklistItem[];
  checklist_items_count: string;
  completed_items_count: string;
}

export interface SubTicketAssignment {
  id: number;
  user: UserMinimal;
  role?: Role451enum;
  assigned_at: string;
  assigned_by: UserMinimal;
}

export interface Tag {
  id: number;
  name: string;
  color?: string;
  description?: string;
  created_at: string;
  created_by: UserMinimal;
}

export interface Tenant {
  id: number;
  schema_name: string;
  domain_url: string;
  name: string;
  description?: string;
  admin_email: string;
  admin_name: string;
  plan?: PlanEnum;
  max_users?: number;
  max_storage?: number;
  preferred_language?: PreferredLanguageEnum;
  frontend_url?: string;
  deployment_status?: DeploymentStatusEnum;
  is_active?: boolean;
  created_on: string;
}

export interface TenantCreate {
  name: string;
  description?: string;
  admin_email: string;
  admin_name: string;
  plan?: PlanEnum;
  max_users?: number;
  max_storage?: number;
  preferred_language?: PreferredLanguageEnum;
  domain: string;
}

export interface TenantDashboardData {
  tenant_info: string;
  user_info: string;
  statistics: string;
}

export interface TenantGroup {
  id: number;
  name: string;
  description?: string;
  is_active?: boolean;
  created_at: string;
  updated_at: string;
  member_count: string;
  can_view_all_tickets?: boolean;
  can_manage_users?: boolean;
  can_make_calls?: boolean;
  can_manage_groups?: boolean;
  can_manage_settings?: boolean;
  can_create_tickets?: boolean;
  can_edit_own_tickets?: boolean;
  can_edit_all_tickets?: boolean;
  can_delete_tickets?: boolean;
  can_assign_tickets?: boolean;
  can_view_reports?: boolean;
  can_export_data?: boolean;
  can_manage_tags?: boolean;
  can_manage_columns?: boolean;
  can_view_boards?: boolean;
  can_create_boards?: boolean;
  can_edit_boards?: boolean;
  can_delete_boards?: boolean;
  can_access_orders?: boolean;
}

export interface TenantGroupCreate {
  name: string;
  description?: string;
  can_view_all_tickets?: boolean;
  can_manage_users?: boolean;
  can_make_calls?: boolean;
  can_manage_groups?: boolean;
  can_manage_settings?: boolean;
  can_create_tickets?: boolean;
  can_edit_own_tickets?: boolean;
  can_edit_all_tickets?: boolean;
  can_delete_tickets?: boolean;
  can_assign_tickets?: boolean;
  can_view_reports?: boolean;
  can_export_data?: boolean;
  can_manage_tags?: boolean;
  can_manage_columns?: boolean;
  can_view_boards?: boolean;
  can_create_boards?: boolean;
  can_edit_boards?: boolean;
  can_delete_boards?: boolean;
  can_access_orders?: boolean;
}

export interface TenantGroupMinimal {
  id: number;
  name: string;
  description: string;
}

export interface TenantLogin {
  email: string;
  password: string;
}

export interface TenantRegistration {
  company_name: string;
  domain: string;
  description?: string;
  package_id: number;
  pricing_model: PricingModelEnum;
  agent_count?: number;
  admin_email: string;
  admin_password: string;
  admin_first_name: string;
  admin_last_name: string;
  preferred_language?: PreferredLanguageEnum;
}

export interface Ticket {
  id: number;
  title: string;
  description?: string;
  rich_description?: any;
  description_format?: DescriptionFormatEnum;
  status: string;
  priority?: PriorityEnum;
  is_closed: string;
  is_order?: boolean;
  column: TicketColumn;
  column_id?: number;
  position_in_column?: number;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  assigned_to: UserMinimal;
  assigned_to_id?: number;
  assigned_users: UserMinimal[];
  assignments: TicketAssignment[];
  assigned_user_ids?: number[];
  assignment_roles?: Record<string, any>;
  assigned_groups: TenantGroupMinimal[];
  assigned_group_ids?: number[];
  tags: Tag[];
  tag_ids?: number[];
  comments: TicketComment[];
  comments_count: string;
  sub_tickets: SubTicket[];
  sub_tickets_count: string;
  completed_sub_tickets_count: string;
  checklist_items: ChecklistItem[];
  checklist_items_count: string;
  completed_checklist_items_count: string;
  price?: string;
  currency?: string;
  is_paid?: boolean;
  amount_paid?: string;
  payment_due_date?: string;
  payments: TicketPayment[];
  remaining_balance: string;
  payment_status: string;
  is_overdue: string;
  form_submissions: string;
}

export interface TicketAssignment {
  id: number;
  user: UserMinimal;
  role?: Role451enum;
  assigned_at: string;
  assigned_by: UserMinimal;
}

export interface TicketAttachment {
  id: number;
  ticket: number;
  file: string;
  file_url: string;
  filename: string;
  file_size: number;
  content_type: string;
  uploaded_by: UserMinimal;
  uploaded_at: string;
}

export interface TicketColumn {
  id: number;
  name: string;
  description?: string;
  color?: string;
  position?: number;
  is_default?: boolean;
  is_closed_status?: boolean;
  track_time?: boolean;
  board: number;
  created_at: string;
  updated_at: string;
  created_by: string;
  tickets_count: string;
}

export interface TicketColumnCreate {
  name: string;
  description?: string;
  color?: string;
  position?: number;
  is_default?: boolean;
  is_closed_status?: boolean;
  track_time?: boolean;
  board: number;
}

export interface TicketColumnUpdate {
  name: string;
  description?: string;
  color?: string;
  position?: number;
  is_default?: boolean;
  is_closed_status?: boolean;
  track_time?: boolean;
  board: number;
}

export interface TicketComment {
  id: number;
  ticket: number;
  user: UserMinimal;
  user_id?: number;
  comment: string;
  created_at: string;
  updated_at: string;
}

export interface TicketForm {
  id: number;
  title: string;
  description?: string;
  parent_form: TicketFormMinimal;
  parent_form_id?: number;
  child_forms: TicketFormMinimal[];
  child_forms_count: string;
  item_lists: ItemListMinimal[];
  item_list_ids?: number[];
  form_config?: any;
  custom_fields?: any;
  is_default?: boolean;
  is_active?: boolean;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  submissions_count: string;
}

export interface TicketFormMinimal {
  id: number;
  title: string;
  description: string;
  is_default: boolean;
  is_active: boolean;
  created_at: string;
  created_by: UserMinimal;
  child_forms: string;
  parent_form: string;
  item_lists: ItemListMinimal[];
  submissions_count: string;
  custom_fields: any;
}

export interface TicketFormSubmission {
  id: number;
  ticket: number;
  form: TicketFormMinimal;
  form_id: number;
  selected_items: ListItemMinimal[];
  selected_item_ids?: number[];
  form_data?: any;
  submitted_at: string;
  submitted_by: UserMinimal;
  ticket_data: string;
}

export interface TicketList {
  id: number;
  title: string;
  status: string;
  priority: PriorityEnum;
  is_closed: string;
  column: TicketColumn;
  position_in_column: number;
  created_at: string;
  updated_at: string;
  created_by: UserMinimal;
  assigned_to: UserMinimal;
  assigned_users: UserMinimal[];
  assigned_groups: TenantGroupMinimal[];
  assignments: TicketAssignment[];
  tags: Tag[];
  comments_count: string;
}

export interface TicketPayment {
  id: number;
  ticket: number;
  amount: string;
  currency?: string;
  payment_method?: PaymentMethodEnum;
  payment_reference?: string;
  notes?: string;
  processed_by: UserMinimal;
  processed_at: string;
}

export interface TicketTimeLog {
  id: number;
  ticket: string;
  column: TicketColumn;
  user: UserMinimal;
  entered_at: string;
  exited_at: string;
  duration_seconds: number;
  duration_display: string;
}

export interface TimeTrackingSummary {
  period_days: number;
  start_date: string;
  total_time_seconds: number;
  total_sessions: number;
  time_by_column: any[];
  daily_breakdown: any[];
  recent_activity: TicketTimeLog[];
  active_sessions: TicketTimeLog[];
}

export interface User {
  id: number;
  email: string;
  first_name?: string;
  last_name?: string;
  full_name: string;
  role?: Role4c6enum;
  status?: Status336enum;
  phone_number?: string;
  job_title?: string;
  department: Department;
  department_id?: number;
  is_active?: boolean;
  is_staff?: boolean;
  date_joined: string;
  last_login: string;
  permissions: string;
  group_permissions: string;
  all_permissions: string;
  groups: Group[];
  group_ids?: number[];
  tenant_groups: TenantGroup[];
  tenant_group_ids?: number[];
  user_permission_ids?: number[];
}

export interface UserCreate {
  email: string;
  first_name?: string;
  last_name?: string;
  password: string;
  password_confirm: string;
  role?: Role4c6enum;
  status?: Status336enum;
  phone_number?: string;
  job_title?: string;
  department_id?: number;
  group_ids?: number[];
  user_permission_ids?: number[];
}

export interface UserMinimal {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
}

export interface UserUpdate {
  first_name?: string;
  last_name?: string;
  role?: Role4c6enum;
  status?: Status336enum;
  phone_number?: string;
  job_title?: string;
  is_active?: boolean;
  group_ids?: number[];
  tenant_group_ids?: number[];
  user_permission_ids?: number[];
}
