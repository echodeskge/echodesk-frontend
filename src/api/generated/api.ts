/**
 * THIS FILE IS AUTOMATICALLY GENERATED FROM: https://api.echodesk.ge/api/schema
 * DO NOT EDIT MANUALLY
 */

import axios from '../axios';
import type {
  PaginatedTicketAttachmentList,
  TicketAttachment,
  PatchedTicketAttachment,
  TenantDashboardData,
  TenantLogin,
  PaginatedBoardList,
  Board,
  PatchedBoard,
  PaginatedCallLogList,
  CallLogCreate,
  CallLogDetail,
  CallLog,
  PatchedCallLog,
  CallEvent,
  CallStatusUpdate,
  CallRecording,
  PatchedCallStatusUpdate,
  CallInitiate,
  PaginatedChecklistItemList,
  ChecklistItem,
  PatchedChecklistItem,
  PaginatedClientList,
  Client,
  PatchedClient,
  PaginatedTicketColumnList,
  TicketColumnCreate,
  TicketColumn,
  TicketColumnUpdate,
  PatchedTicketColumnUpdate,
  KanbanBoard,
  PaginatedTicketCommentList,
  TicketComment,
  PatchedTicketComment,
  PaginatedDepartmentList,
  Department,
  PatchedDepartment,
  PaginatedAttributeDefinitionList,
  AttributeDefinition,
  PatchedAttributeDefinition,
  PaginatedProductCategoryList,
  ProductCategory,
  PatchedProductCategory,
  PaginatedProductImageList,
  ProductImage,
  PatchedProductImage,
  PaginatedProductListList,
  ProductCreateUpdate,
  ProductDetail,
  PatchedProductCreateUpdate,
  PaginatedProductTypeList,
  ProductType,
  PatchedProductType,
  PaginatedProductVariantList,
  ProductVariant,
  PatchedProductVariant,
  PaginatedFeatureList,
  Feature,
  PaginatedTicketFormSubmissionList,
  TicketFormSubmission,
  PatchedTicketFormSubmission,
  PaginatedGroupList,
  GroupCreate,
  Group,
  PatchedGroup,
  PaginatedItemListMinimalList,
  ItemList,
  PatchedItemList,
  PaginatedListItemMinimalList,
  ListItem,
  PatchedListItem,
  PaginatedNotificationList,
  Notification,
  PatchedNotification,
  PaginatedPackageListList,
  Package,
  PackageList,
  PaginatedTicketPaymentList,
  TicketPayment,
  PatchedTicketPayment,
  PaginatedPermissionList,
  Permission,
  TenantRegistration,
  Tenant,
  PaginatedSipConfigurationListList,
  SipConfiguration,
  SipConfigurationDetail,
  PatchedSipConfiguration,
  PaginatedFacebookMessageList,
  FacebookMessage,
  PaginatedFacebookPageConnectionList,
  FacebookPageConnection,
  PatchedFacebookPageConnection,
  FacebookSendMessage,
  PaginatedSubTicketList,
  SubTicket,
  PatchedSubTicket,
  PaginatedSubTicketAssignmentList,
  SubTicketAssignment,
  PatchedSubTicketAssignment,
  PaginatedTagList,
  Tag,
  PatchedTag,
  PaginatedTenantFeatureList,
  TenantFeature,
  PaginatedTenantGroupList,
  TenantGroupCreate,
  TenantGroup,
  PatchedTenantGroup,
  PaginatedTenantPermissionList,
  TenantPermission,
  PaginatedTenantList,
  TenantCreate,
  PatchedTenant,
  PaginatedTicketFormMinimalList,
  TicketForm,
  PatchedTicketForm,
  PaginatedTicketListList,
  Ticket,
  PatchedTicket,
  PaginatedTicketAssignmentList,
  TicketAssignment,
  PatchedTicketAssignment,
  PaginatedTicketTimeLogList,
  TicketTimeLog,
  TimeTrackingSummary,
  PaginatedUserList,
  UserCreate,
  User,
  UserUpdate,
  PatchedUserUpdate,
} from './interfaces';

export async function apiAttachmentsList(
  page?: number,
  ticket?: number,
): Promise<PaginatedTicketAttachmentList> {
  const response = await axios.get(
    `/api/attachments/${(() => {
      const parts = [
        page ? 'page=' + encodeURIComponent(page) : null,
        ticket ? 'ticket=' + encodeURIComponent(ticket) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiAttachmentsCreate(
  data: TicketAttachment,
): Promise<TicketAttachment> {
  const response = await axios.post(`/api/attachments/`, data);
  return response.data;
}

export async function apiAttachmentsRetrieve(
  id: number,
): Promise<TicketAttachment> {
  const response = await axios.get(`/api/attachments/${id}/`);
  return response.data;
}

export async function apiAttachmentsUpdate(
  id: number,
  data: TicketAttachment,
): Promise<TicketAttachment> {
  const response = await axios.put(`/api/attachments/${id}/`, data);
  return response.data;
}

export async function apiAttachmentsPartialUpdate(
  id: number,
  data: PatchedTicketAttachment,
): Promise<TicketAttachment> {
  const response = await axios.patch(`/api/attachments/${id}/`, data);
  return response.data;
}

export async function apiAttachmentsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/attachments/${id}/`);
  return response.data;
}

export async function changeTenantPassword(): Promise<{
  message?: string;
}> {
  const response = await axios.post(`/api/auth/change-password/`);
  return response.data;
}

export async function tenantDashboard(): Promise<TenantDashboardData> {
  const response = await axios.get(`/api/auth/dashboard/`);
  return response.data;
}

export async function forcedPasswordChange(data: {
  email: string;
  current_password: string;
  new_password: string;
}): Promise<{
  message?: string;
  token?: string;
}> {
  const response = await axios.post(`/api/auth/forced-password-change/`, data);
  return response.data;
}

export async function tenantLogin(data: TenantLogin): Promise<{
  message?: string;
  token?: string;
  dashboard_data?: Record<string, any>;
}> {
  const response = await axios.post(`/api/auth/login/`, data);
  return response.data;
}

export async function tenantLogout(): Promise<{
  message?: string;
}> {
  const response = await axios.post(`/api/auth/logout/`);
  return response.data;
}

export async function tenantProfile(): Promise<{
  id?: number;
  email?: string;
  first_name?: string;
  last_name?: string;
  is_staff?: boolean;
  is_superuser?: boolean;
  date_joined?: string;
  last_login?: string;
  is_active?: boolean;
  groups?: {
    id?: number;
    name?: string;
    permissions?: {
      id?: number;
      codename?: string;
      name?: string;
      app_label?: string;
      model?: string;
    }[];
  }[];
  all_permissions?: string[];
}> {
  const response = await axios.get(`/api/auth/profile/`);
  return response.data;
}

export async function updateTenantProfile2(): Promise<{
  message?: string;
  user?: Record<string, any>;
}> {
  const response = await axios.put(`/api/auth/profile/update/`);
  return response.data;
}

export async function updateTenantProfile(): Promise<{
  message?: string;
  user?: Record<string, any>;
}> {
  const response = await axios.patch(`/api/auth/profile/update/`);
  return response.data;
}

export async function apiBoardsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedBoardList> {
  const response = await axios.get(
    `/api/boards/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiBoardsCreate(data: Board): Promise<Board> {
  const response = await axios.post(`/api/boards/`, data);
  return response.data;
}

export async function apiBoardsRetrieve(id: string): Promise<Board> {
  const response = await axios.get(`/api/boards/${id}/`);
  return response.data;
}

export async function apiBoardsUpdate(id: string, data: Board): Promise<Board> {
  const response = await axios.put(`/api/boards/${id}/`, data);
  return response.data;
}

export async function apiBoardsPartialUpdate(
  id: string,
  data: PatchedBoard,
): Promise<Board> {
  const response = await axios.patch(`/api/boards/${id}/`, data);
  return response.data;
}

export async function apiBoardsDestroy(id: string): Promise<any> {
  const response = await axios.delete(`/api/boards/${id}/`);
  return response.data;
}

export async function apiBoardsKanbanBoardRetrieve(id: string): Promise<Board> {
  const response = await axios.get(`/api/boards/${id}/kanban_board/`);
  return response.data;
}

export async function apiBoardsSetDefaultCreate(
  id: string,
  data: Board,
): Promise<Board> {
  const response = await axios.post(`/api/boards/${id}/set_default/`, data);
  return response.data;
}

export async function apiBoardsDefaultRetrieve(): Promise<Board> {
  const response = await axios.get(`/api/boards/default/`);
  return response.data;
}

export async function apiCallLogsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedCallLogList> {
  const response = await axios.get(
    `/api/call-logs/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiCallLogsCreate(
  data: CallLogCreate,
): Promise<CallLogCreate> {
  const response = await axios.post(`/api/call-logs/`, data);
  return response.data;
}

export async function apiCallLogsRetrieve(id: number): Promise<CallLogDetail> {
  const response = await axios.get(`/api/call-logs/${id}/`);
  return response.data;
}

export async function apiCallLogsUpdate(
  id: number,
  data: CallLog,
): Promise<CallLog> {
  const response = await axios.put(`/api/call-logs/${id}/`, data);
  return response.data;
}

export async function apiCallLogsPartialUpdate(
  id: number,
  data: PatchedCallLog,
): Promise<CallLog> {
  const response = await axios.patch(`/api/call-logs/${id}/`, data);
  return response.data;
}

export async function apiCallLogsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/call-logs/${id}/`);
  return response.data;
}

export async function apiCallLogsAddEventCreate(
  id: number,
  data: CallEvent,
): Promise<CallEvent> {
  const response = await axios.post(`/api/call-logs/${id}/add_event/`, data);
  return response.data;
}

export async function apiCallLogsEndCallCreate(
  id: number,
  data: CallStatusUpdate,
): Promise<CallLog> {
  const response = await axios.post(`/api/call-logs/${id}/end_call/`, data);
  return response.data;
}

export async function apiCallLogsStartRecordingCreate(
  id: number,
  data: CallLog,
): Promise<CallRecording> {
  const response = await axios.post(
    `/api/call-logs/${id}/start_recording/`,
    data,
  );
  return response.data;
}

export async function apiCallLogsStopRecordingCreate(
  id: number,
  data: CallLog,
): Promise<CallRecording> {
  const response = await axios.post(
    `/api/call-logs/${id}/stop_recording/`,
    data,
  );
  return response.data;
}

export async function apiCallLogsToggleHoldCreate(
  id: number,
  data: CallLog,
): Promise<CallLog> {
  const response = await axios.post(`/api/call-logs/${id}/toggle_hold/`, data);
  return response.data;
}

export async function apiCallLogsTransferCallCreate(
  id: number,
  data: CallLog,
): Promise<CallLog> {
  const response = await axios.post(
    `/api/call-logs/${id}/transfer_call/`,
    data,
  );
  return response.data;
}

export async function apiCallLogsUpdateStatusPartialUpdate(
  id: number,
  data: PatchedCallStatusUpdate,
): Promise<CallLog> {
  const response = await axios.patch(
    `/api/call-logs/${id}/update_status/`,
    data,
  );
  return response.data;
}

export async function apiCallLogsInitiateCallCreate(
  data: CallInitiate,
): Promise<CallLog> {
  const response = await axios.post(`/api/call-logs/initiate_call/`, data);
  return response.data;
}

export async function apiCallLogsLogIncomingCallCreate(
  data: CallLogCreate,
): Promise<CallLog> {
  const response = await axios.post(`/api/call-logs/log_incoming_call/`, data);
  return response.data;
}

export async function apiCallLogsStatisticsRetrieve(
  period?: 'month' | 'today' | 'week',
): Promise<Record<string, any>> {
  const response = await axios.get(
    `/api/call-logs/statistics/${period ? '?period=' + encodeURIComponent(period) : ''}`,
  );
  return response.data;
}

export async function apiChecklistItemsList(
  ordering?: string,
  page?: number,
): Promise<PaginatedChecklistItemList> {
  const response = await axios.get(
    `/api/checklist-items/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiChecklistItemsCreate(
  data: ChecklistItem,
): Promise<ChecklistItem> {
  const response = await axios.post(`/api/checklist-items/`, data);
  return response.data;
}

export async function apiChecklistItemsRetrieve(
  id: string,
): Promise<ChecklistItem> {
  const response = await axios.get(`/api/checklist-items/${id}/`);
  return response.data;
}

export async function apiChecklistItemsUpdate(
  id: string,
  data: ChecklistItem,
): Promise<ChecklistItem> {
  const response = await axios.put(`/api/checklist-items/${id}/`, data);
  return response.data;
}

export async function apiChecklistItemsPartialUpdate(
  id: string,
  data: PatchedChecklistItem,
): Promise<ChecklistItem> {
  const response = await axios.patch(`/api/checklist-items/${id}/`, data);
  return response.data;
}

export async function apiChecklistItemsDestroy(id: string): Promise<any> {
  const response = await axios.delete(`/api/checklist-items/${id}/`);
  return response.data;
}

export async function apiChecklistItemsReorderPartialUpdate(
  id: string,
  data: PatchedChecklistItem,
): Promise<ChecklistItem> {
  const response = await axios.patch(
    `/api/checklist-items/${id}/reorder/`,
    data,
  );
  return response.data;
}

export async function apiChecklistItemsToggleCheckPartialUpdate(
  id: string,
  data: PatchedChecklistItem,
): Promise<ChecklistItem> {
  const response = await axios.patch(
    `/api/checklist-items/${id}/toggle_check/`,
    data,
  );
  return response.data;
}

export async function apiClientsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedClientList> {
  const response = await axios.get(
    `/api/clients/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiClientsCreate(data: Client): Promise<Client> {
  const response = await axios.post(`/api/clients/`, data);
  return response.data;
}

export async function apiClientsRetrieve(id: number): Promise<Client> {
  const response = await axios.get(`/api/clients/${id}/`);
  return response.data;
}

export async function apiClientsUpdate(
  id: number,
  data: Client,
): Promise<Client> {
  const response = await axios.put(`/api/clients/${id}/`, data);
  return response.data;
}

export async function apiClientsPartialUpdate(
  id: number,
  data: PatchedClient,
): Promise<Client> {
  const response = await axios.patch(`/api/clients/${id}/`, data);
  return response.data;
}

export async function apiClientsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/clients/${id}/`);
  return response.data;
}

export async function apiClientsCallHistoryList(
  id: number,
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedCallLogList> {
  const response = await axios.get(
    `/api/clients/${id}/call_history/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiColumnsList(
  board?: number,
  ordering?: string,
  page?: number,
): Promise<PaginatedTicketColumnList> {
  const response = await axios.get(
    `/api/columns/${(() => {
      const parts = [
        board ? 'board=' + encodeURIComponent(board) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiColumnsCreate(
  data: TicketColumnCreate,
): Promise<TicketColumnCreate> {
  const response = await axios.post(`/api/columns/`, data);
  return response.data;
}

export async function apiColumnsRetrieve(id: number): Promise<TicketColumn> {
  const response = await axios.get(`/api/columns/${id}/`);
  return response.data;
}

export async function apiColumnsUpdate(
  id: number,
  data: TicketColumnUpdate,
): Promise<TicketColumnUpdate> {
  const response = await axios.put(`/api/columns/${id}/`, data);
  return response.data;
}

export async function apiColumnsPartialUpdate(
  id: number,
  data: PatchedTicketColumnUpdate,
): Promise<TicketColumnUpdate> {
  const response = await axios.patch(`/api/columns/${id}/`, data);
  return response.data;
}

export async function apiColumnsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/columns/${id}/`);
  return response.data;
}

export async function apiColumnsReorderCreate(
  id: number,
  data: TicketColumn,
): Promise<TicketColumn> {
  const response = await axios.post(`/api/columns/${id}/reorder/`, data);
  return response.data;
}

export async function kanbanBoard(): Promise<KanbanBoard> {
  const response = await axios.get(`/api/columns/kanban_board/`);
  return response.data;
}

export async function apiCommentsList(
  ordering?: string,
  page?: number,
): Promise<PaginatedTicketCommentList> {
  const response = await axios.get(
    `/api/comments/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiCommentsCreate(
  data: TicketComment,
): Promise<TicketComment> {
  const response = await axios.post(`/api/comments/`, data);
  return response.data;
}

export async function apiCommentsRetrieve(id: string): Promise<TicketComment> {
  const response = await axios.get(`/api/comments/${id}/`);
  return response.data;
}

export async function apiCommentsUpdate(
  id: string,
  data: TicketComment,
): Promise<TicketComment> {
  const response = await axios.put(`/api/comments/${id}/`, data);
  return response.data;
}

export async function apiCommentsPartialUpdate(
  id: string,
  data: PatchedTicketComment,
): Promise<TicketComment> {
  const response = await axios.patch(`/api/comments/${id}/`, data);
  return response.data;
}

export async function apiCommentsDestroy(id: string): Promise<any> {
  const response = await axios.delete(`/api/comments/${id}/`);
  return response.data;
}

export async function apiCorsTestRetrieve(): Promise<any> {
  const response = await axios.get(`/api/cors-test/`);
  return response.data;
}

export async function apiCronHealthRetrieve(): Promise<any> {
  const response = await axios.get(`/api/cron/health/`);
  return response.data;
}

export async function apiCronProcessTrialExpirationsRetrieve(): Promise<any> {
  const response = await axios.get(`/api/cron/process-trial-expirations/`);
  return response.data;
}

export async function apiCronProcessTrialExpirationsCreate(): Promise<any> {
  const response = await axios.post(`/api/cron/process-trial-expirations/`);
  return response.data;
}

export async function apiCronRecurringPaymentsRetrieve(): Promise<any> {
  const response = await axios.get(`/api/cron/recurring-payments/`);
  return response.data;
}

export async function apiCronRecurringPaymentsCreate(): Promise<any> {
  const response = await axios.post(`/api/cron/recurring-payments/`);
  return response.data;
}

export async function apiCronSubscriptionCheckRetrieve(): Promise<any> {
  const response = await axios.get(`/api/cron/subscription-check/`);
  return response.data;
}

export async function apiCronSubscriptionCheckCreate(): Promise<any> {
  const response = await axios.post(`/api/cron/subscription-check/`);
  return response.data;
}

export async function apiDepartmentsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedDepartmentList> {
  const response = await axios.get(
    `/api/departments/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiDepartmentsCreate(
  data: Department,
): Promise<Department> {
  const response = await axios.post(`/api/departments/`, data);
  return response.data;
}

export async function apiDepartmentsRetrieve(id: number): Promise<Department> {
  const response = await axios.get(`/api/departments/${id}/`);
  return response.data;
}

export async function apiDepartmentsUpdate(
  id: number,
  data: Department,
): Promise<Department> {
  const response = await axios.put(`/api/departments/${id}/`, data);
  return response.data;
}

export async function apiDepartmentsPartialUpdate(
  id: number,
  data: PatchedDepartment,
): Promise<Department> {
  const response = await axios.patch(`/api/departments/${id}/`, data);
  return response.data;
}

export async function apiDepartmentsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/departments/${id}/`);
  return response.data;
}

export async function apiDeploymentStatusRetrieve(
  tenantId: number,
): Promise<any> {
  const response = await axios.get(`/api/deployment-status/${tenantId}/`);
  return response.data;
}

export async function apiEcommerceAttributesList(
  attributeType?:
    | 'boolean'
    | 'color'
    | 'date'
    | 'multiselect'
    | 'number'
    | 'select'
    | 'text',
  isFilterable?: boolean,
  isVariantAttribute?: boolean,
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedAttributeDefinitionList> {
  const response = await axios.get(
    `/api/ecommerce/attributes/${(() => {
      const parts = [
        attributeType
          ? 'attribute_type=' + encodeURIComponent(attributeType)
          : null,
        isFilterable
          ? 'is_filterable=' + encodeURIComponent(isFilterable)
          : null,
        isVariantAttribute
          ? 'is_variant_attribute=' + encodeURIComponent(isVariantAttribute)
          : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiEcommerceAttributesCreate(
  data: AttributeDefinition,
): Promise<AttributeDefinition> {
  const response = await axios.post(`/api/ecommerce/attributes/`, data);
  return response.data;
}

export async function apiEcommerceAttributesRetrieve(
  id: number,
): Promise<AttributeDefinition> {
  const response = await axios.get(`/api/ecommerce/attributes/${id}/`);
  return response.data;
}

export async function apiEcommerceAttributesUpdate(
  id: number,
  data: AttributeDefinition,
): Promise<AttributeDefinition> {
  const response = await axios.put(`/api/ecommerce/attributes/${id}/`, data);
  return response.data;
}

export async function apiEcommerceAttributesPartialUpdate(
  id: number,
  data: PatchedAttributeDefinition,
): Promise<AttributeDefinition> {
  const response = await axios.patch(`/api/ecommerce/attributes/${id}/`, data);
  return response.data;
}

export async function apiEcommerceAttributesDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/ecommerce/attributes/${id}/`);
  return response.data;
}

export async function apiEcommerceCategoriesList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedProductCategoryList> {
  const response = await axios.get(
    `/api/ecommerce/categories/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiEcommerceCategoriesCreate(
  data: ProductCategory,
): Promise<ProductCategory> {
  const response = await axios.post(`/api/ecommerce/categories/`, data);
  return response.data;
}

export async function apiEcommerceCategoriesRetrieve(
  id: number,
): Promise<ProductCategory> {
  const response = await axios.get(`/api/ecommerce/categories/${id}/`);
  return response.data;
}

export async function apiEcommerceCategoriesUpdate(
  id: number,
  data: ProductCategory,
): Promise<ProductCategory> {
  const response = await axios.put(`/api/ecommerce/categories/${id}/`, data);
  return response.data;
}

export async function apiEcommerceCategoriesPartialUpdate(
  id: number,
  data: PatchedProductCategory,
): Promise<ProductCategory> {
  const response = await axios.patch(`/api/ecommerce/categories/${id}/`, data);
  return response.data;
}

export async function apiEcommerceCategoriesDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/ecommerce/categories/${id}/`);
  return response.data;
}

export async function apiEcommerceCategoriesTreeRetrieve(): Promise<ProductCategory> {
  const response = await axios.get(`/api/ecommerce/categories/tree/`);
  return response.data;
}

export async function apiEcommerceImagesList(
  ordering?: string,
  page?: number,
  product?: number,
): Promise<PaginatedProductImageList> {
  const response = await axios.get(
    `/api/ecommerce/images/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        product ? 'product=' + encodeURIComponent(product) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiEcommerceImagesCreate(
  data: ProductImage,
): Promise<ProductImage> {
  const response = await axios.post(`/api/ecommerce/images/`, data);
  return response.data;
}

export async function apiEcommerceImagesRetrieve(
  id: number,
): Promise<ProductImage> {
  const response = await axios.get(`/api/ecommerce/images/${id}/`);
  return response.data;
}

export async function apiEcommerceImagesUpdate(
  id: number,
  data: ProductImage,
): Promise<ProductImage> {
  const response = await axios.put(`/api/ecommerce/images/${id}/`, data);
  return response.data;
}

export async function apiEcommerceImagesPartialUpdate(
  id: number,
  data: PatchedProductImage,
): Promise<ProductImage> {
  const response = await axios.patch(`/api/ecommerce/images/${id}/`, data);
  return response.data;
}

export async function apiEcommerceImagesDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/ecommerce/images/${id}/`);
  return response.data;
}

export async function apiEcommerceProductsList(
  category?: number,
  categorySlug?: string,
  inStock?: boolean,
  isFeatured?: boolean,
  lowStock?: boolean,
  maxPrice?: number,
  minPrice?: number,
  ordering?: string,
  page?: number,
  productType?: number,
  productTypeKey?: string,
  search?: string,
  status?: 'active' | 'draft' | 'inactive' | 'out_of_stock',
): Promise<PaginatedProductListList> {
  const response = await axios.get(
    `/api/ecommerce/products/${(() => {
      const parts = [
        category ? 'category=' + encodeURIComponent(category) : null,
        categorySlug
          ? 'category_slug=' + encodeURIComponent(categorySlug)
          : null,
        inStock ? 'in_stock=' + encodeURIComponent(inStock) : null,
        isFeatured ? 'is_featured=' + encodeURIComponent(isFeatured) : null,
        lowStock ? 'low_stock=' + encodeURIComponent(lowStock) : null,
        maxPrice ? 'max_price=' + encodeURIComponent(maxPrice) : null,
        minPrice ? 'min_price=' + encodeURIComponent(minPrice) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        productType ? 'product_type=' + encodeURIComponent(productType) : null,
        productTypeKey
          ? 'product_type_key=' + encodeURIComponent(productTypeKey)
          : null,
        search ? 'search=' + encodeURIComponent(search) : null,
        status ? 'status=' + encodeURIComponent(status) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiEcommerceProductsCreate(
  data: ProductCreateUpdate,
): Promise<ProductCreateUpdate> {
  const response = await axios.post(`/api/ecommerce/products/`, data);
  return response.data;
}

export async function apiEcommerceProductsRetrieve(
  id: number,
): Promise<ProductDetail> {
  const response = await axios.get(`/api/ecommerce/products/${id}/`);
  return response.data;
}

export async function apiEcommerceProductsUpdate(
  id: number,
  data: ProductCreateUpdate,
): Promise<ProductCreateUpdate> {
  const response = await axios.put(`/api/ecommerce/products/${id}/`, data);
  return response.data;
}

export async function apiEcommerceProductsPartialUpdate(
  id: number,
  data: PatchedProductCreateUpdate,
): Promise<ProductCreateUpdate> {
  const response = await axios.patch(`/api/ecommerce/products/${id}/`, data);
  return response.data;
}

export async function apiEcommerceProductsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/ecommerce/products/${id}/`);
  return response.data;
}

export async function apiEcommerceProductsAddImageCreate(
  id: number,
  data: ProductDetail,
): Promise<ProductDetail> {
  const response = await axios.post(
    `/api/ecommerce/products/${id}/add_image/`,
    data,
  );
  return response.data;
}

export async function apiEcommerceProductsRemoveImageDestroy(
  id: number,
  imageId: string,
): Promise<any> {
  const response = await axios.delete(
    `/api/ecommerce/products/${id}/remove_image/${imageId}/`,
  );
  return response.data;
}

export async function apiEcommerceProductsUpdateAttributesCreate(
  id: number,
  data: ProductDetail,
): Promise<ProductDetail> {
  const response = await axios.post(
    `/api/ecommerce/products/${id}/update_attributes/`,
    data,
  );
  return response.data;
}

export async function apiEcommerceProductsFeaturedRetrieve(): Promise<ProductDetail> {
  const response = await axios.get(`/api/ecommerce/products/featured/`);
  return response.data;
}

export async function apiEcommerceProductsLowStockRetrieve(): Promise<ProductDetail> {
  const response = await axios.get(`/api/ecommerce/products/low_stock/`);
  return response.data;
}

export async function apiEcommerceTypesList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedProductTypeList> {
  const response = await axios.get(
    `/api/ecommerce/types/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiEcommerceTypesCreate(
  data: ProductType,
): Promise<ProductType> {
  const response = await axios.post(`/api/ecommerce/types/`, data);
  return response.data;
}

export async function apiEcommerceTypesRetrieve(
  id: number,
): Promise<ProductType> {
  const response = await axios.get(`/api/ecommerce/types/${id}/`);
  return response.data;
}

export async function apiEcommerceTypesUpdate(
  id: number,
  data: ProductType,
): Promise<ProductType> {
  const response = await axios.put(`/api/ecommerce/types/${id}/`, data);
  return response.data;
}

export async function apiEcommerceTypesPartialUpdate(
  id: number,
  data: PatchedProductType,
): Promise<ProductType> {
  const response = await axios.patch(`/api/ecommerce/types/${id}/`, data);
  return response.data;
}

export async function apiEcommerceTypesDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/ecommerce/types/${id}/`);
  return response.data;
}

export async function apiEcommerceVariantsList(
  isActive?: boolean,
  ordering?: string,
  page?: number,
  product?: number,
  search?: string,
): Promise<PaginatedProductVariantList> {
  const response = await axios.get(
    `/api/ecommerce/variants/${(() => {
      const parts = [
        isActive ? 'is_active=' + encodeURIComponent(isActive) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        product ? 'product=' + encodeURIComponent(product) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiEcommerceVariantsCreate(
  data: ProductVariant,
): Promise<ProductVariant> {
  const response = await axios.post(`/api/ecommerce/variants/`, data);
  return response.data;
}

export async function apiEcommerceVariantsRetrieve(
  id: number,
): Promise<ProductVariant> {
  const response = await axios.get(`/api/ecommerce/variants/${id}/`);
  return response.data;
}

export async function apiEcommerceVariantsUpdate(
  id: number,
  data: ProductVariant,
): Promise<ProductVariant> {
  const response = await axios.put(`/api/ecommerce/variants/${id}/`, data);
  return response.data;
}

export async function apiEcommerceVariantsPartialUpdate(
  id: number,
  data: PatchedProductVariant,
): Promise<ProductVariant> {
  const response = await axios.patch(`/api/ecommerce/variants/${id}/`, data);
  return response.data;
}

export async function apiEcommerceVariantsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/ecommerce/variants/${id}/`);
  return response.data;
}

export async function apiFeaturesList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedFeatureList> {
  const response = await axios.get(
    `/api/features/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiFeaturesRetrieve(id: number): Promise<Feature> {
  const response = await axios.get(`/api/features/${id}/`);
  return response.data;
}

export async function apiFormSubmissionsList(
  form?: number,
  ordering?: string,
  page?: number,
  submittedBy?: number,
  ticket?: number,
): Promise<PaginatedTicketFormSubmissionList> {
  const response = await axios.get(
    `/api/form-submissions/${(() => {
      const parts = [
        form ? 'form=' + encodeURIComponent(form) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        submittedBy ? 'submitted_by=' + encodeURIComponent(submittedBy) : null,
        ticket ? 'ticket=' + encodeURIComponent(ticket) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiFormSubmissionsCreate(
  data: TicketFormSubmission,
): Promise<TicketFormSubmission> {
  const response = await axios.post(`/api/form-submissions/`, data);
  return response.data;
}

export async function apiFormSubmissionsRetrieve(
  id: number,
): Promise<TicketFormSubmission> {
  const response = await axios.get(`/api/form-submissions/${id}/`);
  return response.data;
}

export async function apiFormSubmissionsUpdate(
  id: number,
  data: TicketFormSubmission,
): Promise<TicketFormSubmission> {
  const response = await axios.put(`/api/form-submissions/${id}/`, data);
  return response.data;
}

export async function apiFormSubmissionsPartialUpdate(
  id: number,
  data: PatchedTicketFormSubmission,
): Promise<TicketFormSubmission> {
  const response = await axios.patch(`/api/form-submissions/${id}/`, data);
  return response.data;
}

export async function apiFormSubmissionsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/form-submissions/${id}/`);
  return response.data;
}

export async function apiFormSubmissionsByFormRetrieve(): Promise<TicketFormSubmission> {
  const response = await axios.get(`/api/form-submissions/by_form/`);
  return response.data;
}

export async function apiFormSubmissionsByTicketRetrieve(): Promise<TicketFormSubmission> {
  const response = await axios.get(`/api/form-submissions/by_ticket/`);
  return response.data;
}

export async function apiGroupsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedGroupList> {
  const response = await axios.get(
    `/api/groups/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiGroupsCreate(data: GroupCreate): Promise<GroupCreate> {
  const response = await axios.post(`/api/groups/`, data);
  return response.data;
}

export async function apiGroupsRetrieve(id: number): Promise<Group> {
  const response = await axios.get(`/api/groups/${id}/`);
  return response.data;
}

export async function apiGroupsUpdate(id: number, data: Group): Promise<Group> {
  const response = await axios.put(`/api/groups/${id}/`, data);
  return response.data;
}

export async function apiGroupsPartialUpdate(
  id: number,
  data: PatchedGroup,
): Promise<Group> {
  const response = await axios.patch(`/api/groups/${id}/`, data);
  return response.data;
}

export async function apiGroupsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/groups/${id}/`);
  return response.data;
}

export async function apiGroupsAddUsersCreate(
  id: number,
  data: Group,
): Promise<Group> {
  const response = await axios.post(`/api/groups/${id}/add_users/`, data);
  return response.data;
}

export async function apiGroupsRemoveUsersCreate(
  id: number,
  data: Group,
): Promise<Group> {
  const response = await axios.post(`/api/groups/${id}/remove_users/`, data);
  return response.data;
}

export async function apiGroupsAvailablePermissionsRetrieve(): Promise<Group> {
  const response = await axios.get(`/api/groups/available_permissions/`);
  return response.data;
}

export async function apiItemListsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedItemListMinimalList> {
  const response = await axios.get(
    `/api/item-lists/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiItemListsCreate(data: ItemList): Promise<ItemList> {
  const response = await axios.post(`/api/item-lists/`, data);
  return response.data;
}

export async function apiItemListsRetrieve(id: number): Promise<ItemList> {
  const response = await axios.get(`/api/item-lists/${id}/`);
  return response.data;
}

export async function apiItemListsUpdate(
  id: number,
  data: ItemList,
): Promise<ItemList> {
  const response = await axios.put(`/api/item-lists/${id}/`, data);
  return response.data;
}

export async function apiItemListsPartialUpdate(
  id: number,
  data: PatchedItemList,
): Promise<ItemList> {
  const response = await axios.patch(`/api/item-lists/${id}/`, data);
  return response.data;
}

export async function apiItemListsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/item-lists/${id}/`);
  return response.data;
}

export async function apiItemListsRootItemsRetrieve(
  id: number,
): Promise<ItemList> {
  const response = await axios.get(`/api/item-lists/${id}/root_items/`);
  return response.data;
}

export async function apiListItemsList(
  isActive?: boolean,
  itemList?: number,
  ordering?: string,
  page?: number,
  parent?: number,
  search?: string,
): Promise<PaginatedListItemMinimalList> {
  const response = await axios.get(
    `/api/list-items/${(() => {
      const parts = [
        isActive ? 'is_active=' + encodeURIComponent(isActive) : null,
        itemList ? 'item_list=' + encodeURIComponent(itemList) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        parent ? 'parent=' + encodeURIComponent(parent) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiListItemsCreate(data: ListItem): Promise<ListItem> {
  const response = await axios.post(`/api/list-items/`, data);
  return response.data;
}

export async function apiListItemsRetrieve(id: number): Promise<ListItem> {
  const response = await axios.get(`/api/list-items/${id}/`);
  return response.data;
}

export async function apiListItemsUpdate(
  id: number,
  data: ListItem,
): Promise<ListItem> {
  const response = await axios.put(`/api/list-items/${id}/`, data);
  return response.data;
}

export async function apiListItemsPartialUpdate(
  id: number,
  data: PatchedListItem,
): Promise<ListItem> {
  const response = await axios.patch(`/api/list-items/${id}/`, data);
  return response.data;
}

export async function apiListItemsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/list-items/${id}/`);
  return response.data;
}

export async function apiListItemsAllDescendantsRetrieve(
  id: number,
): Promise<ListItem> {
  const response = await axios.get(`/api/list-items/${id}/all_descendants/`);
  return response.data;
}

export async function apiListItemsChildrenRetrieve(
  id: number,
): Promise<ListItem> {
  const response = await axios.get(`/api/list-items/${id}/children/`);
  return response.data;
}

export async function apiListItemsReorderPartialUpdate(
  id: number,
  data: PatchedListItem,
): Promise<ListItem> {
  const response = await axios.patch(`/api/list-items/${id}/reorder/`, data);
  return response.data;
}

export async function apiNotificationsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedNotificationList> {
  const response = await axios.get(
    `/api/notifications/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiNotificationsCreate(
  data: Notification,
): Promise<Notification> {
  const response = await axios.post(`/api/notifications/`, data);
  return response.data;
}

export async function apiNotificationsRetrieve(
  id: string,
): Promise<Notification> {
  const response = await axios.get(`/api/notifications/${id}/`);
  return response.data;
}

export async function apiNotificationsUpdate(
  id: string,
  data: Notification,
): Promise<Notification> {
  const response = await axios.put(`/api/notifications/${id}/`, data);
  return response.data;
}

export async function apiNotificationsPartialUpdate(
  id: string,
  data: PatchedNotification,
): Promise<Notification> {
  const response = await axios.patch(`/api/notifications/${id}/`, data);
  return response.data;
}

export async function apiNotificationsDestroy(id: string): Promise<any> {
  const response = await axios.delete(`/api/notifications/${id}/`);
  return response.data;
}

export async function apiNotificationsMarkReadCreate(
  id: string,
  data: Notification,
): Promise<Notification> {
  const response = await axios.post(
    `/api/notifications/${id}/mark_read/`,
    data,
  );
  return response.data;
}

export async function apiNotificationsClearAllDestroy(): Promise<any> {
  const response = await axios.delete(`/api/notifications/clear_all/`);
  return response.data;
}

export async function apiNotificationsMarkAllReadCreate(
  data: Notification,
): Promise<Notification> {
  const response = await axios.post(`/api/notifications/mark_all_read/`, data);
  return response.data;
}

export async function apiNotificationsUnreadCountRetrieve(): Promise<Notification> {
  const response = await axios.get(`/api/notifications/unread_count/`);
  return response.data;
}

export async function apiPackagesList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedPackageListList> {
  const response = await axios.get(
    `/api/packages/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function getPackageFeatures(packageId: number): Promise<{
  package_id?: number;
  package_name?: string;
  features?: string[];
  limits?: {
    max_users?: number;
    max_whatsapp_messages?: number;
    max_storage_gb?: number;
  };
  capabilities?: {
    ticket_management?: boolean;
    email_integration?: boolean;
    sip_calling?: boolean;
    facebook_integration?: boolean;
    instagram_integration?: boolean;
    whatsapp_integration?: boolean;
    advanced_analytics?: boolean;
    api_access?: boolean;
    custom_integrations?: boolean;
    priority_support?: boolean;
    dedicated_account_manager?: boolean;
  };
}> {
  const response = await axios.get(`/api/packages/${packageId}/features/`);
  return response.data;
}

export async function apiPackagesRetrieve(id: number): Promise<Package> {
  const response = await axios.get(`/api/packages/${id}/`);
  return response.data;
}

export async function listAvailableFeatures(): Promise<{
  categories?: {
    category?: string;
    category_display?: string;
    features?: {
      id?: number;
      key?: string;
      name?: string;
      description?: string;
      icon?: string;
      price_gel?: string;
    }[];
  }[];
}> {
  const response = await axios.get(`/api/packages/available-features/`);
  return response.data;
}

export async function listPackagesByPricingModel(): Promise<PackageList[]> {
  const response = await axios.get(`/api/packages/by-model/`);
  return response.data;
}

export async function calculateCustomPackagePrice(data: {
  feature_ids: number[];
}): Promise<{
  features?: {
    id?: number;
    name?: string;
    price_gel?: string;
  }[];
  total_price?: string;
  currency?: string;
}> {
  const response = await axios.post(
    `/api/packages/calculate-custom-price/`,
    data,
  );
  return response.data;
}

export async function calculatePricing(): Promise<{
  package_id?: number;
  package_name?: string;
  pricing_model?: string;
  base_price?: number;
  agent_count?: number;
  monthly_cost?: number;
  yearly_cost?: number;
  savings_yearly?: number;
}> {
  const response = await axios.get(`/api/packages/calculate-pricing/`);
  return response.data;
}

export async function apiPaymentsList(
  currency?: string,
  ordering?: string,
  page?: number,
  paymentMethod?:
    | 'bank_transfer'
    | 'card'
    | 'cash'
    | 'manual'
    | 'other'
    | 'paypal'
    | 'stripe',
  ticket?: number,
): Promise<PaginatedTicketPaymentList> {
  const response = await axios.get(
    `/api/payments/${(() => {
      const parts = [
        currency ? 'currency=' + encodeURIComponent(currency) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        paymentMethod
          ? 'payment_method=' + encodeURIComponent(paymentMethod)
          : null,
        ticket ? 'ticket=' + encodeURIComponent(ticket) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiPaymentsCreate(
  data: TicketPayment,
): Promise<TicketPayment> {
  const response = await axios.post(`/api/payments/`, data);
  return response.data;
}

export async function apiPaymentsRetrieve(id: number): Promise<TicketPayment> {
  const response = await axios.get(`/api/payments/${id}/`);
  return response.data;
}

export async function apiPaymentsUpdate(
  id: number,
  data: TicketPayment,
): Promise<TicketPayment> {
  const response = await axios.put(`/api/payments/${id}/`, data);
  return response.data;
}

export async function apiPaymentsPartialUpdate(
  id: number,
  data: PatchedTicketPayment,
): Promise<TicketPayment> {
  const response = await axios.patch(`/api/payments/${id}/`, data);
  return response.data;
}

export async function apiPaymentsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/payments/${id}/`);
  return response.data;
}

export async function cancelSubscription(): Promise<any> {
  const response = await axios.post(`/api/payments/cancel/`);
  return response.data;
}

export async function createSubscriptionPayment(): Promise<{
  payment_id?: string;
  payment_url?: string;
  amount?: number;
  currency?: string;
}> {
  const response = await axios.post(`/api/payments/create/`);
  return response.data;
}

export async function manualPayment(): Promise<{
  payment_url?: string;
  order_id?: string;
  amount?: number;
}> {
  const response = await axios.post(`/api/payments/manual/`);
  return response.data;
}

export async function apiPaymentsPaymentSummaryRetrieve(): Promise<TicketPayment> {
  const response = await axios.get(`/api/payments/payment_summary/`);
  return response.data;
}

export async function apiPaymentsProcessPaymentCreate(
  data: TicketPayment,
): Promise<TicketPayment> {
  const response = await axios.post(`/api/payments/process_payment/`, data);
  return response.data;
}

export async function getSavedCard(): Promise<any> {
  const response = await axios.get(`/api/payments/saved-card/`);
  return response.data;
}

export async function removeSavedCard(): Promise<any> {
  const response = await axios.delete(`/api/payments/saved-card/`);
  return response.data;
}

export async function checkPaymentStatus(paymentId: string): Promise<{
  payment_id?: string;
  status?: string;
  amount?: number;
  paid?: boolean;
}> {
  const response = await axios.get(`/api/payments/status/${paymentId}/`);
  return response.data;
}

export async function bogWebhook(): Promise<any> {
  const response = await axios.post(`/api/payments/webhook/`);
  return response.data;
}

export async function apiPermissionsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedPermissionList> {
  const response = await axios.get(
    `/api/permissions/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiPermissionsRetrieve(id: number): Promise<Permission> {
  const response = await axios.get(`/api/permissions/${id}/`);
  return response.data;
}

export async function apiPreflightTestRetrieve(): Promise<any> {
  const response = await axios.get(`/api/preflight-test/`);
  return response.data;
}

export async function registerTenant(data: TenantRegistration): Promise<{
  message?: string;
  tenant?: Record<string, any>;
  subscription?: Record<string, any>;
  frontend_url?: string;
  api_url?: string;
}> {
  const response = await axios.post(`/api/register/`, data);
  return response.data;
}

export async function registerTenantWithPayment(
  data: TenantRegistration,
): Promise<{
  payment_url?: string;
  order_id?: string;
  amount?: number;
  currency?: string;
}> {
  const response = await axios.post(`/api/register-with-payment/`, data);
  return response.data;
}

export async function apiSipConfigurationsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedSipConfigurationListList> {
  const response = await axios.get(
    `/api/sip-configurations/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiSipConfigurationsCreate(
  data: SipConfiguration,
): Promise<SipConfiguration> {
  const response = await axios.post(`/api/sip-configurations/`, data);
  return response.data;
}

export async function apiSipConfigurationsRetrieve(
  id: number,
): Promise<SipConfigurationDetail> {
  const response = await axios.get(`/api/sip-configurations/${id}/`);
  return response.data;
}

export async function apiSipConfigurationsUpdate(
  id: number,
  data: SipConfiguration,
): Promise<SipConfiguration> {
  const response = await axios.put(`/api/sip-configurations/${id}/`, data);
  return response.data;
}

export async function apiSipConfigurationsPartialUpdate(
  id: number,
  data: PatchedSipConfiguration,
): Promise<SipConfiguration> {
  const response = await axios.patch(`/api/sip-configurations/${id}/`, data);
  return response.data;
}

export async function apiSipConfigurationsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/sip-configurations/${id}/`);
  return response.data;
}

export async function apiSipConfigurationsSetDefaultCreate(
  id: number,
  data: SipConfiguration,
): Promise<Record<string, any>> {
  const response = await axios.post(
    `/api/sip-configurations/${id}/set_default/`,
    data,
  );
  return response.data;
}

export async function apiSipConfigurationsTestConnectionCreate(
  id: number,
  data: SipConfiguration,
): Promise<Record<string, any>> {
  const response = await axios.post(
    `/api/sip-configurations/${id}/test_connection/`,
    data,
  );
  return response.data;
}

export async function apiSipConfigurationsWebrtcConfigRetrieve(
  id: number,
): Promise<SipConfigurationDetail> {
  const response = await axios.get(
    `/api/sip-configurations/${id}/webrtc_config/`,
  );
  return response.data;
}

export async function apiSocialFacebookMessagesList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedFacebookMessageList> {
  const response = await axios.get(
    `/api/social/facebook-messages/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiSocialFacebookMessagesRetrieve(
  id: number,
): Promise<FacebookMessage> {
  const response = await axios.get(`/api/social/facebook-messages/${id}/`);
  return response.data;
}

export async function apiSocialFacebookPagesList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedFacebookPageConnectionList> {
  const response = await axios.get(
    `/api/social/facebook-pages/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiSocialFacebookPagesCreate(
  data: FacebookPageConnection,
): Promise<FacebookPageConnection> {
  const response = await axios.post(`/api/social/facebook-pages/`, data);
  return response.data;
}

export async function apiSocialFacebookPagesRetrieve(
  id: number,
): Promise<FacebookPageConnection> {
  const response = await axios.get(`/api/social/facebook-pages/${id}/`);
  return response.data;
}

export async function apiSocialFacebookPagesUpdate(
  id: number,
  data: FacebookPageConnection,
): Promise<FacebookPageConnection> {
  const response = await axios.put(`/api/social/facebook-pages/${id}/`, data);
  return response.data;
}

export async function apiSocialFacebookPagesPartialUpdate(
  id: number,
  data: PatchedFacebookPageConnection,
): Promise<FacebookPageConnection> {
  const response = await axios.patch(`/api/social/facebook-pages/${id}/`, data);
  return response.data;
}

export async function apiSocialFacebookPagesDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/social/facebook-pages/${id}/`);
  return response.data;
}

export async function apiSocialFacebookApiTestRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/api/test/`);
  return response.data;
}

export async function apiSocialFacebookApiTestCreate(): Promise<any> {
  const response = await axios.post(`/api/social/facebook/api/test/`);
  return response.data;
}

export async function apiSocialFacebookDatabaseDebugRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/database/debug/`);
  return response.data;
}

export async function apiSocialFacebookDatabaseTestRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/database/test/`);
  return response.data;
}

export async function apiSocialFacebookDatabaseTestCreate(): Promise<any> {
  const response = await axios.post(`/api/social/facebook/database/test/`);
  return response.data;
}

export async function apiSocialFacebookDisconnectCreate(): Promise<any> {
  const response = await axios.post(`/api/social/facebook/disconnect/`);
  return response.data;
}

export async function apiSocialFacebookOauthCallbackRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/oauth/callback/`);
  return response.data;
}

export async function apiSocialFacebookOauthDebugRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/oauth/debug/`);
  return response.data;
}

export async function apiSocialFacebookOauthStartRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/oauth/start/`);
  return response.data;
}

export async function apiSocialFacebookPagesDebugRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/pages/debug/`);
  return response.data;
}

export async function apiSocialFacebookSendMessageCreate(
  data: FacebookSendMessage,
): Promise<{
  success?: boolean;
  message?: string;
  facebook_message_id?: string;
}> {
  const response = await axios.post(`/api/social/facebook/send-message/`, data);
  return response.data;
}

export async function apiSocialFacebookStatusRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/status/`);
  return response.data;
}

export async function apiSocialFacebookWebhookTestRetrieve(): Promise<any> {
  const response = await axios.get(`/api/social/facebook/webhook/test/`);
  return response.data;
}

export async function apiSocialFacebookWebhookTestCreate(): Promise<any> {
  const response = await axios.post(`/api/social/facebook/webhook/test/`);
  return response.data;
}

export async function apiSubTicketsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedSubTicketList> {
  const response = await axios.get(
    `/api/sub-tickets/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiSubTicketsCreate(data: SubTicket): Promise<SubTicket> {
  const response = await axios.post(`/api/sub-tickets/`, data);
  return response.data;
}

export async function apiSubTicketsRetrieve(id: string): Promise<SubTicket> {
  const response = await axios.get(`/api/sub-tickets/${id}/`);
  return response.data;
}

export async function apiSubTicketsUpdate(
  id: string,
  data: SubTicket,
): Promise<SubTicket> {
  const response = await axios.put(`/api/sub-tickets/${id}/`, data);
  return response.data;
}

export async function apiSubTicketsPartialUpdate(
  id: string,
  data: PatchedSubTicket,
): Promise<SubTicket> {
  const response = await axios.patch(`/api/sub-tickets/${id}/`, data);
  return response.data;
}

export async function apiSubTicketsDestroy(id: string): Promise<any> {
  const response = await axios.delete(`/api/sub-tickets/${id}/`);
  return response.data;
}

export async function apiSubTicketsReorderPartialUpdate(
  id: string,
  data: PatchedSubTicket,
): Promise<SubTicket> {
  const response = await axios.patch(`/api/sub-tickets/${id}/reorder/`, data);
  return response.data;
}

export async function apiSubTicketsToggleCompletionPartialUpdate(
  id: string,
  data: PatchedSubTicket,
): Promise<SubTicket> {
  const response = await axios.patch(
    `/api/sub-tickets/${id}/toggle_completion/`,
    data,
  );
  return response.data;
}

export async function apiSubTicketsAssignmentsList(
  subTicketPk: number,
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedSubTicketAssignmentList> {
  const response = await axios.get(
    `/api/sub-tickets/${subTicketPk}/assignments/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiSubTicketsAssignmentsCreate(
  subTicketPk: number,
  data: SubTicketAssignment,
): Promise<SubTicketAssignment> {
  const response = await axios.post(
    `/api/sub-tickets/${subTicketPk}/assignments/`,
    data,
  );
  return response.data;
}

export async function apiSubTicketsAssignmentsRetrieve(
  id: number,
  subTicketPk: number,
): Promise<SubTicketAssignment> {
  const response = await axios.get(
    `/api/sub-tickets/${subTicketPk}/assignments/${id}/`,
  );
  return response.data;
}

export async function apiSubTicketsAssignmentsUpdate(
  id: number,
  subTicketPk: number,
  data: SubTicketAssignment,
): Promise<SubTicketAssignment> {
  const response = await axios.put(
    `/api/sub-tickets/${subTicketPk}/assignments/${id}/`,
    data,
  );
  return response.data;
}

export async function apiSubTicketsAssignmentsPartialUpdate(
  id: number,
  subTicketPk: number,
  data: PatchedSubTicketAssignment,
): Promise<SubTicketAssignment> {
  const response = await axios.patch(
    `/api/sub-tickets/${subTicketPk}/assignments/${id}/`,
    data,
  );
  return response.data;
}

export async function apiSubTicketsAssignmentsDestroy(
  id: number,
  subTicketPk: number,
): Promise<any> {
  const response = await axios.delete(
    `/api/sub-tickets/${subTicketPk}/assignments/${id}/`,
  );
  return response.data;
}

export async function apiSubTicketsAssignmentsBulkAssignCreate(
  subTicketPk: number,
  data: SubTicketAssignment,
): Promise<SubTicketAssignment> {
  const response = await axios.post(
    `/api/sub-tickets/${subTicketPk}/assignments/bulk_assign/`,
    data,
  );
  return response.data;
}

export async function apiSubTicketsAssignmentsBulkUnassignDestroy(
  subTicketPk: number,
): Promise<any> {
  const response = await axios.delete(
    `/api/sub-tickets/${subTicketPk}/assignments/bulk_unassign/`,
  );
  return response.data;
}

export async function getMySubscription(): Promise<{
  has_subscription?: boolean;
  package?: {
    id?: number;
    name?: string;
    pricing_model?: string;
  };
  subscription?: {
    is_active?: boolean;
    starts_at?: string;
    expires_at?: string;
    monthly_cost?: number;
    agent_count?: number;
  };
  features?: Record<string, any>;
  limits?: Record<string, any>;
  usage?: Record<string, any>;
  usage_limits?: Record<string, any>;
}> {
  const response = await axios.get(`/api/subscription/me/`);
  return response.data;
}

export async function apiTagsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTagList> {
  const response = await axios.get(
    `/api/tags/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTagsCreate(data: Tag): Promise<Tag> {
  const response = await axios.post(`/api/tags/`, data);
  return response.data;
}

export async function apiTagsRetrieve(id: number): Promise<Tag> {
  const response = await axios.get(`/api/tags/${id}/`);
  return response.data;
}

export async function apiTagsUpdate(id: number, data: Tag): Promise<Tag> {
  const response = await axios.put(`/api/tags/${id}/`, data);
  return response.data;
}

export async function apiTagsPartialUpdate(
  id: number,
  data: PatchedTag,
): Promise<Tag> {
  const response = await axios.patch(`/api/tags/${id}/`, data);
  return response.data;
}

export async function apiTagsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tags/${id}/`);
  return response.data;
}

export async function apiTenantFeaturesList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTenantFeatureList> {
  const response = await axios.get(
    `/api/tenant-features/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTenantFeaturesRetrieve(
  id: number,
): Promise<TenantFeature> {
  const response = await axios.get(`/api/tenant-features/${id}/`);
  return response.data;
}

export async function apiTenantFeaturesCheckCreate(
  data: TenantFeature,
): Promise<TenantFeature> {
  const response = await axios.post(`/api/tenant-features/check/`, data);
  return response.data;
}

export async function apiTenantGroupsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTenantGroupList> {
  const response = await axios.get(
    `/api/tenant-groups/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTenantGroupsCreate(
  data: TenantGroupCreate,
): Promise<TenantGroupCreate> {
  const response = await axios.post(`/api/tenant-groups/`, data);
  return response.data;
}

export async function apiTenantGroupsRetrieve(
  id: number,
): Promise<TenantGroup> {
  const response = await axios.get(`/api/tenant-groups/${id}/`);
  return response.data;
}

export async function apiTenantGroupsUpdate(
  id: number,
  data: TenantGroup,
): Promise<TenantGroup> {
  const response = await axios.put(`/api/tenant-groups/${id}/`, data);
  return response.data;
}

export async function apiTenantGroupsPartialUpdate(
  id: number,
  data: PatchedTenantGroup,
): Promise<TenantGroup> {
  const response = await axios.patch(`/api/tenant-groups/${id}/`, data);
  return response.data;
}

export async function apiTenantGroupsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tenant-groups/${id}/`);
  return response.data;
}

export async function apiTenantGroupsAddUsersCreate(
  id: number,
  data: TenantGroup,
): Promise<TenantGroup> {
  const response = await axios.post(
    `/api/tenant-groups/${id}/add_users/`,
    data,
  );
  return response.data;
}

export async function apiTenantGroupsMembersRetrieve(
  id: number,
): Promise<TenantGroup> {
  const response = await axios.get(`/api/tenant-groups/${id}/members/`);
  return response.data;
}

export async function apiTenantGroupsRemoveUsersCreate(
  id: number,
  data: TenantGroup,
): Promise<TenantGroup> {
  const response = await axios.post(
    `/api/tenant-groups/${id}/remove_users/`,
    data,
  );
  return response.data;
}

export async function apiTenantGroupsAvailableFeaturesRetrieve(): Promise<TenantGroup> {
  const response = await axios.get(`/api/tenant-groups/available_features/`);
  return response.data;
}

export async function apiTenantPermissionsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTenantPermissionList> {
  const response = await axios.get(
    `/api/tenant-permissions/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTenantPermissionsRetrieve(
  id: number,
): Promise<TenantPermission> {
  const response = await axios.get(`/api/tenant-permissions/${id}/`);
  return response.data;
}

export async function tenantSettingsGet(): Promise<{
  logo?: string;
  company_name?: string;
}> {
  const response = await axios.get(`/api/tenant-settings/`);
  return response.data;
}

export async function tenantSettingsRemoveLogo(): Promise<{
  message?: string;
}> {
  const response = await axios.delete(`/api/tenant-settings/remove-logo/`);
  return response.data;
}

export async function tenantSettingsUploadLogo(): Promise<{
  logo_url?: string;
  message?: string;
}> {
  const response = await axios.post(`/api/tenant-settings/upload-logo/`);
  return response.data;
}

export async function apiTenantConfigRetrieve(): Promise<any> {
  const response = await axios.get(`/api/tenant/config/`);
  return response.data;
}

export async function getTenantLanguage(): Promise<{
  preferred_language?: string;
  tenant_name?: string;
  schema_name?: string;
}> {
  const response = await axios.get(`/api/tenant/language/`);
  return response.data;
}

export async function apiTenantLanguageUpdateUpdate(): Promise<any> {
  const response = await axios.put(`/api/tenant/language/update/`);
  return response.data;
}

export async function apiTenantLanguageUpdatePartialUpdate(): Promise<any> {
  const response = await axios.patch(`/api/tenant/language/update/`);
  return response.data;
}

export async function apiTenantsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTenantList> {
  const response = await axios.get(
    `/api/tenants/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTenantsCreate(
  data: TenantCreate,
): Promise<TenantCreate> {
  const response = await axios.post(`/api/tenants/`, data);
  return response.data;
}

export async function apiTenantsRetrieve(id: number): Promise<Tenant> {
  const response = await axios.get(`/api/tenants/${id}/`);
  return response.data;
}

export async function apiTenantsUpdate(
  id: number,
  data: Tenant,
): Promise<Tenant> {
  const response = await axios.put(`/api/tenants/${id}/`, data);
  return response.data;
}

export async function apiTenantsPartialUpdate(
  id: number,
  data: PatchedTenant,
): Promise<Tenant> {
  const response = await axios.patch(`/api/tenants/${id}/`, data);
  return response.data;
}

export async function apiTenantsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tenants/${id}/`);
  return response.data;
}

export async function apiTenantsCreateAdminUserCreate(
  id: number,
  data: Tenant,
): Promise<Tenant> {
  const response = await axios.post(
    `/api/tenants/${id}/create_admin_user/`,
    data,
  );
  return response.data;
}

export async function apiTenantsUsersRetrieve(id: number): Promise<Tenant> {
  const response = await axios.get(`/api/tenants/${id}/users/`);
  return response.data;
}

export async function apiTenantsListRetrieve(): Promise<any> {
  const response = await axios.get(`/api/tenants/list/`);
  return response.data;
}

export async function apiTicketFormsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTicketFormMinimalList> {
  const response = await axios.get(
    `/api/ticket-forms/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTicketFormsCreate(
  data: TicketForm,
): Promise<TicketForm> {
  const response = await axios.post(`/api/ticket-forms/`, data);
  return response.data;
}

export async function apiTicketFormsRetrieve(id: number): Promise<TicketForm> {
  const response = await axios.get(`/api/ticket-forms/${id}/`);
  return response.data;
}

export async function apiTicketFormsUpdate(
  id: number,
  data: TicketForm,
): Promise<TicketForm> {
  const response = await axios.put(`/api/ticket-forms/${id}/`, data);
  return response.data;
}

export async function apiTicketFormsPartialUpdate(
  id: number,
  data: PatchedTicketForm,
): Promise<TicketForm> {
  const response = await axios.patch(`/api/ticket-forms/${id}/`, data);
  return response.data;
}

export async function apiTicketFormsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/ticket-forms/${id}/`);
  return response.data;
}

export async function apiTicketFormsSetDefaultCreate(
  id: number,
  data: TicketForm,
): Promise<TicketForm> {
  const response = await axios.post(
    `/api/ticket-forms/${id}/set_default/`,
    data,
  );
  return response.data;
}

export async function apiTicketFormsWithListsRetrieve(
  id: number,
): Promise<TicketForm> {
  const response = await axios.get(`/api/ticket-forms/${id}/with_lists/`);
  return response.data;
}

export async function apiTicketFormsDefaultRetrieve(): Promise<TicketForm> {
  const response = await axios.get(`/api/ticket-forms/default/`);
  return response.data;
}

export async function apiTicketsList(
  assignedGroups?: number[],
  assignedTo?: number,
  column?: number,
  createdBy?: number,
  ordering?: string,
  page?: number,
  priority?: 'critical' | 'high' | 'low' | 'medium',
  search?: string,
  tags?: number[],
): Promise<PaginatedTicketListList> {
  const response = await axios.get(
    `/api/tickets/${(() => {
      const parts = [
        assignedGroups
          ? 'assigned_groups=' +
            assignedGroups
              .map(String)
              .map(encodeURIComponent)
              .join('&assigned_groups=')
          : null,
        assignedTo ? 'assigned_to=' + encodeURIComponent(assignedTo) : null,
        column ? 'column=' + encodeURIComponent(column) : null,
        createdBy ? 'created_by=' + encodeURIComponent(createdBy) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        priority ? 'priority=' + encodeURIComponent(priority) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
        tags
          ? 'tags=' + tags.map(String).map(encodeURIComponent).join('&tags=')
          : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTicketsCreate(data: Ticket): Promise<Ticket> {
  const response = await axios.post(`/api/tickets/`, data);
  return response.data;
}

export async function apiTicketsRetrieve(id: number): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/${id}/`);
  return response.data;
}

export async function apiTicketsUpdate(
  id: number,
  data: Ticket,
): Promise<Ticket> {
  const response = await axios.put(`/api/tickets/${id}/`, data);
  return response.data;
}

export async function apiTicketsPartialUpdate(
  id: number,
  data: PatchedTicket,
): Promise<Ticket> {
  const response = await axios.patch(`/api/tickets/${id}/`, data);
  return response.data;
}

export async function apiTicketsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tickets/${id}/`);
  return response.data;
}

export async function apiTicketsAddCommentCreate(
  id: number,
  data: Ticket,
): Promise<Ticket> {
  const response = await axios.post(`/api/tickets/${id}/add_comment/`, data);
  return response.data;
}

export async function apiTicketsAssignPartialUpdate(
  id: number,
  data: PatchedTicket,
): Promise<Ticket> {
  const response = await axios.patch(`/api/tickets/${id}/assign/`, data);
  return response.data;
}

export async function apiTicketsCommentsRetrieve(id: number): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/${id}/comments/`);
  return response.data;
}

export async function apiTicketsHistoryRetrieve(id: number): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/${id}/history/`);
  return response.data;
}

export async function moveTicketToColumn(id: number): Promise<Ticket> {
  const response = await axios.patch(`/api/tickets/${id}/move_to_column/`);
  return response.data;
}

export async function apiTicketsReorderInColumnPartialUpdate(
  id: number,
  data: PatchedTicket,
): Promise<Ticket> {
  const response = await axios.patch(
    `/api/tickets/${id}/reorder_in_column/`,
    data,
  );
  return response.data;
}

export async function apiTicketsAssignmentsList(
  ticketPk: number,
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTicketAssignmentList> {
  const response = await axios.get(
    `/api/tickets/${ticketPk}/assignments/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTicketsAssignmentsCreate(
  ticketPk: number,
  data: TicketAssignment,
): Promise<TicketAssignment> {
  const response = await axios.post(
    `/api/tickets/${ticketPk}/assignments/`,
    data,
  );
  return response.data;
}

export async function apiTicketsAssignmentsRetrieve(
  id: number,
  ticketPk: number,
): Promise<TicketAssignment> {
  const response = await axios.get(
    `/api/tickets/${ticketPk}/assignments/${id}/`,
  );
  return response.data;
}

export async function apiTicketsAssignmentsUpdate(
  id: number,
  ticketPk: number,
  data: TicketAssignment,
): Promise<TicketAssignment> {
  const response = await axios.put(
    `/api/tickets/${ticketPk}/assignments/${id}/`,
    data,
  );
  return response.data;
}

export async function apiTicketsAssignmentsPartialUpdate(
  id: number,
  ticketPk: number,
  data: PatchedTicketAssignment,
): Promise<TicketAssignment> {
  const response = await axios.patch(
    `/api/tickets/${ticketPk}/assignments/${id}/`,
    data,
  );
  return response.data;
}

export async function apiTicketsAssignmentsDestroy(
  id: number,
  ticketPk: number,
): Promise<any> {
  const response = await axios.delete(
    `/api/tickets/${ticketPk}/assignments/${id}/`,
  );
  return response.data;
}

export async function apiTicketsAssignmentsBulkAssignCreate(
  ticketPk: number,
  data: TicketAssignment,
): Promise<TicketAssignment> {
  const response = await axios.post(
    `/api/tickets/${ticketPk}/assignments/bulk_assign/`,
    data,
  );
  return response.data;
}

export async function apiTicketsAssignmentsBulkUnassignDestroy(
  ticketPk: number,
): Promise<any> {
  const response = await axios.delete(
    `/api/tickets/${ticketPk}/assignments/bulk_unassign/`,
  );
  return response.data;
}

export async function apiTicketsAssignedToMeRetrieve(): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/assigned_to_me/`);
  return response.data;
}

export async function apiTicketsMyTicketsRetrieve(): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/my_tickets/`);
  return response.data;
}

export async function apiTimeLogsList(
  ordering?: string,
  page?: number,
): Promise<PaginatedTicketTimeLogList> {
  const response = await axios.get(
    `/api/time-logs/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiTimeLogsRetrieve(id: string): Promise<TicketTimeLog> {
  const response = await axios.get(`/api/time-logs/${id}/`);
  return response.data;
}

export async function apiTimeLogsMyTimeSummaryRetrieve(
  days?: number,
): Promise<TimeTrackingSummary> {
  const response = await axios.get(
    `/api/time-logs/my_time_summary/${days ? '?days=' + encodeURIComponent(days) : ''}`,
  );
  return response.data;
}

export async function apiUsersList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedUserList> {
  const response = await axios.get(
    `/api/users/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function apiUsersCreate(data: UserCreate): Promise<UserCreate> {
  const response = await axios.post(`/api/users/`, data);
  return response.data;
}

export async function apiUsersRetrieve(id: number): Promise<User> {
  const response = await axios.get(`/api/users/${id}/`);
  return response.data;
}

export async function apiUsersUpdate(
  id: number,
  data: UserUpdate,
): Promise<UserUpdate> {
  const response = await axios.put(`/api/users/${id}/`, data);
  return response.data;
}

export async function apiUsersPartialUpdate(
  id: number,
  data: PatchedUserUpdate,
): Promise<UserUpdate> {
  const response = await axios.patch(`/api/users/${id}/`, data);
  return response.data;
}

export async function apiUsersDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/users/${id}/`);
  return response.data;
}

export async function apiUsersChangePasswordCreate(
  id: number,
  data: User,
): Promise<User> {
  const response = await axios.post(`/api/users/${id}/change_password/`, data);
  return response.data;
}

export async function apiUsersBulkActionCreate(data: User): Promise<User> {
  const response = await axios.post(`/api/users/bulk_action/`, data);
  return response.data;
}

export async function apiWebhooksRecordingCreate(data: {
  call_id: string;
  recording_id?: string;
  status: 'started' | 'completed' | 'failed';
  file_url?: string;
  file_size?: number;
  duration?: number;
  format?: string;
}): Promise<Record<string, any>> {
  const response = await axios.post(`/api/webhooks/recording/`, data);
  return response.data;
}

export async function apiWebhooksSipCreate(data: {
  event_type:
    | 'call_initiated'
    | 'call_ringing'
    | 'call_answered'
    | 'call_ended'
    | 'call_failed';
  call_id?: string;
  sip_call_id: string;
  caller_number?: string;
  recipient_number?: string;
  timestamp?: string;
  metadata?: Record<string, any>;
}): Promise<Record<string, any>> {
  const response = await axios.post(`/api/webhooks/sip/`, data);
  return response.data;
}

export async function notificationsLogsRetrieve(): Promise<any> {
  const response = await axios.get(`/notifications/logs/`);
  return response.data;
}

export async function notificationsSubscribeCreate(): Promise<any> {
  const response = await axios.post(`/notifications/subscribe/`);
  return response.data;
}

export async function notificationsSubscriptionsRetrieve(): Promise<any> {
  const response = await axios.get(`/notifications/subscriptions/`);
  return response.data;
}

export async function notificationsTestCreate(): Promise<any> {
  const response = await axios.post(`/notifications/test/`);
  return response.data;
}

export async function notificationsUnsubscribeCreate(): Promise<any> {
  const response = await axios.post(`/notifications/unsubscribe/`);
  return response.data;
}

export async function notificationsVapidPublicKeyRetrieve(): Promise<any> {
  const response = await axios.get(`/notifications/vapid-public-key/`);
  return response.data;
}
