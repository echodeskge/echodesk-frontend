/**
 * THIS FILE IS AUTOMATICALLY GENERATED FROM: https://api.echodesk.ge/api/schema
 * DO NOT EDIT MANUALLY
 */

import axios from '../axios';
import type {
  TenantDashboardData,
  TenantLogin,
  PaginatedCallLogList,
  CallLogCreate,
  CallLog,
  PatchedCallLog,
  CallStatusUpdate,
  PatchedCallStatusUpdate,
  CallInitiate,
  PaginatedClientList,
  Client,
  PatchedClient,
  PaginatedTicketColumnList,
  TicketColumnCreate,
  TicketColumn,
  TicketColumnUpdate,
  PatchedTicketColumnUpdate,
  KanbanBoard,
  PaginatedTicketCommentList,
  TicketComment,
  PatchedTicketComment,
  TenantRegistration,
  Tenant,
  PaginatedSipConfigurationListList,
  SipConfiguration,
  SipConfigurationDetail,
  PatchedSipConfiguration,
  PaginatedTagList,
  Tag,
  PatchedTag,
  PaginatedTenantList,
  TenantCreate,
  PatchedTenant,
  PaginatedTicketListList,
  Ticket,
  PatchedTicket,
  PaginatedUserList,
  UserCreate,
  User,
  PatchedUser,
} from './interfaces';

export async function changeTenantPassword(): Promise<{
  message?: string;
}> {
  const response = await axios.post(`/api/auth/change-password/`);
  return response.data;
}

export async function tenantDashboard(): Promise<TenantDashboardData> {
  const response = await axios.get(`/api/auth/dashboard/`);
  return response.data;
}

export async function tenantLogin(data: TenantLogin): Promise<{
  message?: string;
  token?: string;
  dashboard_data?: Record<string, any>;
}> {
  const response = await axios.post(`/api/auth/login/`, data);
  return response.data;
}

export async function tenantLogout(): Promise<{
  message?: string;
}> {
  const response = await axios.post(`/api/auth/logout/`);
  return response.data;
}

export async function tenantProfile(): Promise<{
  id?: number;
  email?: string;
  first_name?: string;
  last_name?: string;
  is_staff?: boolean;
  is_superuser?: boolean;
  date_joined?: string;
  last_login?: string;
  is_active?: boolean;
}> {
  const response = await axios.get(`/api/auth/profile/`);
  return response.data;
}

export async function updateTenantProfile2(): Promise<{
  message?: string;
  user?: Record<string, any>;
}> {
  const response = await axios.put(`/api/auth/profile/update/`);
  return response.data;
}

export async function updateTenantProfile(): Promise<{
  message?: string;
  user?: Record<string, any>;
}> {
  const response = await axios.patch(`/api/auth/profile/update/`);
  return response.data;
}

export async function callLogsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedCallLogList> {
  const response = await axios.get(
    `/api/call-logs/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function callLogsCreate(
  data: CallLogCreate,
): Promise<CallLogCreate> {
  const response = await axios.post(`/api/call-logs/`, data);
  return response.data;
}

export async function callLogsRetrieve(id: number): Promise<CallLog> {
  const response = await axios.get(`/api/call-logs/${id}/`);
  return response.data;
}

export async function callLogsUpdate(
  id: number,
  data: CallLog,
): Promise<CallLog> {
  const response = await axios.put(`/api/call-logs/${id}/`, data);
  return response.data;
}

export async function callLogsPartialUpdate(
  id: number,
  data: PatchedCallLog,
): Promise<CallLog> {
  const response = await axios.patch(`/api/call-logs/${id}/`, data);
  return response.data;
}

export async function callLogsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/call-logs/${id}/`);
  return response.data;
}

export async function callLogsEndCallCreate(
  id: number,
  data: CallStatusUpdate,
): Promise<CallLog> {
  const response = await axios.post(`/api/call-logs/${id}/end_call/`, data);
  return response.data;
}

export async function callLogsUpdateStatusPartialUpdate(
  id: number,
  data: PatchedCallStatusUpdate,
): Promise<CallLog> {
  const response = await axios.patch(
    `/api/call-logs/${id}/update_status/`,
    data,
  );
  return response.data;
}

export async function callLogsInitiateCallCreate(
  data: CallInitiate,
): Promise<CallLog> {
  const response = await axios.post(`/api/call-logs/initiate_call/`, data);
  return response.data;
}

export async function callLogsLogIncomingCallCreate(
  data: CallLogCreate,
): Promise<CallLog> {
  const response = await axios.post(`/api/call-logs/log_incoming_call/`, data);
  return response.data;
}

export async function callLogsStatisticsRetrieve(
  period?: 'month' | 'today' | 'week',
): Promise<Record<string, any>> {
  const response = await axios.get(
    `/api/call-logs/statistics/${period ? '?period=' + encodeURIComponent(period) : ''}`,
  );
  return response.data;
}

export async function clientsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedClientList> {
  const response = await axios.get(
    `/api/clients/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function clientsCreate(data: Client): Promise<Client> {
  const response = await axios.post(`/api/clients/`, data);
  return response.data;
}

export async function clientsRetrieve(id: number): Promise<Client> {
  const response = await axios.get(`/api/clients/${id}/`);
  return response.data;
}

export async function clientsUpdate(id: number, data: Client): Promise<Client> {
  const response = await axios.put(`/api/clients/${id}/`, data);
  return response.data;
}

export async function clientsPartialUpdate(
  id: number,
  data: PatchedClient,
): Promise<Client> {
  const response = await axios.patch(`/api/clients/${id}/`, data);
  return response.data;
}

export async function clientsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/clients/${id}/`);
  return response.data;
}

export async function clientsCallHistoryList(
  id: number,
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedCallLogList> {
  const response = await axios.get(
    `/api/clients/${id}/call_history/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function columnsList(
  ordering?: string,
  page?: number,
): Promise<PaginatedTicketColumnList> {
  const response = await axios.get(
    `/api/columns/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function columnsCreate(
  data: TicketColumnCreate,
): Promise<TicketColumnCreate> {
  const response = await axios.post(`/api/columns/`, data);
  return response.data;
}

export async function columnsRetrieve(id: number): Promise<TicketColumn> {
  const response = await axios.get(`/api/columns/${id}/`);
  return response.data;
}

export async function columnsUpdate(
  id: number,
  data: TicketColumnUpdate,
): Promise<TicketColumnUpdate> {
  const response = await axios.put(`/api/columns/${id}/`, data);
  return response.data;
}

export async function columnsPartialUpdate(
  id: number,
  data: PatchedTicketColumnUpdate,
): Promise<TicketColumnUpdate> {
  const response = await axios.patch(`/api/columns/${id}/`, data);
  return response.data;
}

export async function columnsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/columns/${id}/`);
  return response.data;
}

export async function columnsReorderCreate(
  id: number,
  data: TicketColumn,
): Promise<TicketColumn> {
  const response = await axios.post(`/api/columns/${id}/reorder/`, data);
  return response.data;
}

export async function kanbanBoard(): Promise<KanbanBoard> {
  const response = await axios.get(`/api/columns/kanban_board/`);
  return response.data;
}

export async function commentsList(
  ordering?: string,
  page?: number,
): Promise<PaginatedTicketCommentList> {
  const response = await axios.get(
    `/api/comments/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function commentsCreate(
  data: TicketComment,
): Promise<TicketComment> {
  const response = await axios.post(`/api/comments/`, data);
  return response.data;
}

export async function commentsRetrieve(id: string): Promise<TicketComment> {
  const response = await axios.get(`/api/comments/${id}/`);
  return response.data;
}

export async function commentsUpdate(
  id: string,
  data: TicketComment,
): Promise<TicketComment> {
  const response = await axios.put(`/api/comments/${id}/`, data);
  return response.data;
}

export async function commentsPartialUpdate(
  id: string,
  data: PatchedTicketComment,
): Promise<TicketComment> {
  const response = await axios.patch(`/api/comments/${id}/`, data);
  return response.data;
}

export async function commentsDestroy(id: string): Promise<any> {
  const response = await axios.delete(`/api/comments/${id}/`);
  return response.data;
}

export async function corsTestRetrieve(): Promise<any> {
  const response = await axios.get(`/api/cors-test/`);
  return response.data;
}

export async function deploymentStatusRetrieve(tenantId: number): Promise<any> {
  const response = await axios.get(`/api/deployment-status/${tenantId}/`);
  return response.data;
}

export async function preflightTestRetrieve(): Promise<any> {
  const response = await axios.get(`/api/preflight-test/`);
  return response.data;
}

export async function registerTenant(data: TenantRegistration): Promise<{
  message?: string;
  tenant?: Record<string, any>;
  frontend_url?: string;
  api_url?: string;
}> {
  const response = await axios.post(`/api/register/`, data);
  return response.data;
}

export async function sipConfigurationsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedSipConfigurationListList> {
  const response = await axios.get(
    `/api/sip-configurations/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function sipConfigurationsCreate(
  data: SipConfiguration,
): Promise<SipConfiguration> {
  const response = await axios.post(`/api/sip-configurations/`, data);
  return response.data;
}

export async function sipConfigurationsRetrieve(
  id: number,
): Promise<SipConfigurationDetail> {
  const response = await axios.get(`/api/sip-configurations/${id}/`);
  return response.data;
}

export async function sipConfigurationsUpdate(
  id: number,
  data: SipConfiguration,
): Promise<SipConfiguration> {
  const response = await axios.put(`/api/sip-configurations/${id}/`, data);
  return response.data;
}

export async function sipConfigurationsPartialUpdate(
  id: number,
  data: PatchedSipConfiguration,
): Promise<SipConfiguration> {
  const response = await axios.patch(`/api/sip-configurations/${id}/`, data);
  return response.data;
}

export async function sipConfigurationsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/sip-configurations/${id}/`);
  return response.data;
}

export async function sipConfigurationsSetDefaultCreate(
  id: number,
  data: SipConfiguration,
): Promise<Record<string, any>> {
  const response = await axios.post(
    `/api/sip-configurations/${id}/set_default/`,
    data,
  );
  return response.data;
}

export async function sipConfigurationsTestConnectionCreate(
  id: number,
  data: SipConfiguration,
): Promise<Record<string, any>> {
  const response = await axios.post(
    `/api/sip-configurations/${id}/test_connection/`,
    data,
  );
  return response.data;
}

export async function sipConfigurationsWebrtcConfigRetrieve(
  id: number,
): Promise<SipConfigurationDetail> {
  const response = await axios.get(
    `/api/sip-configurations/${id}/webrtc_config/`,
  );
  return response.data;
}

export async function tagsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTagList> {
  const response = await axios.get(
    `/api/tags/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function tagsCreate(data: Tag): Promise<Tag> {
  const response = await axios.post(`/api/tags/`, data);
  return response.data;
}

export async function tagsRetrieve(id: number): Promise<Tag> {
  const response = await axios.get(`/api/tags/${id}/`);
  return response.data;
}

export async function tagsUpdate(id: number, data: Tag): Promise<Tag> {
  const response = await axios.put(`/api/tags/${id}/`, data);
  return response.data;
}

export async function tagsPartialUpdate(
  id: number,
  data: PatchedTag,
): Promise<Tag> {
  const response = await axios.patch(`/api/tags/${id}/`, data);
  return response.data;
}

export async function tagsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tags/${id}/`);
  return response.data;
}

export async function tenantConfigRetrieve(): Promise<any> {
  const response = await axios.get(`/api/tenant/config/`);
  return response.data;
}

export async function getTenantLanguage(): Promise<{
  preferred_language?: string;
  tenant_name?: string;
  schema_name?: string;
}> {
  const response = await axios.get(`/api/tenant/language/`);
  return response.data;
}

export async function tenantLanguageUpdateUpdate(): Promise<any> {
  const response = await axios.put(`/api/tenant/language/update/`);
  return response.data;
}

export async function tenantLanguageUpdatePartialUpdate(): Promise<any> {
  const response = await axios.patch(`/api/tenant/language/update/`);
  return response.data;
}

export async function tenantsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTenantList> {
  const response = await axios.get(
    `/api/tenants/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function tenantsCreate(data: TenantCreate): Promise<TenantCreate> {
  const response = await axios.post(`/api/tenants/`, data);
  return response.data;
}

export async function tenantsRetrieve(id: number): Promise<Tenant> {
  const response = await axios.get(`/api/tenants/${id}/`);
  return response.data;
}

export async function tenantsUpdate(id: number, data: Tenant): Promise<Tenant> {
  const response = await axios.put(`/api/tenants/${id}/`, data);
  return response.data;
}

export async function tenantsPartialUpdate(
  id: number,
  data: PatchedTenant,
): Promise<Tenant> {
  const response = await axios.patch(`/api/tenants/${id}/`, data);
  return response.data;
}

export async function tenantsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tenants/${id}/`);
  return response.data;
}

export async function tenantsCreateAdminUserCreate(
  id: number,
  data: Tenant,
): Promise<Tenant> {
  const response = await axios.post(
    `/api/tenants/${id}/create_admin_user/`,
    data,
  );
  return response.data;
}

export async function tenantsUsersRetrieve(id: number): Promise<Tenant> {
  const response = await axios.get(`/api/tenants/${id}/users/`);
  return response.data;
}

export async function tenantsListRetrieve(): Promise<any> {
  const response = await axios.get(`/api/tenants/list/`);
  return response.data;
}

export async function ticketsList(
  assignedTo?: number,
  column?: number,
  createdBy?: number,
  ordering?: string,
  page?: number,
  priority?: 'critical' | 'high' | 'low' | 'medium',
  search?: string,
  status?: 'closed' | 'in_progress' | 'open' | 'resolved',
  tags?: number[],
): Promise<PaginatedTicketListList> {
  const response = await axios.get(
    `/api/tickets/${(() => {
      const parts = [
        assignedTo ? 'assigned_to=' + encodeURIComponent(assignedTo) : null,
        column ? 'column=' + encodeURIComponent(column) : null,
        createdBy ? 'created_by=' + encodeURIComponent(createdBy) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        priority ? 'priority=' + encodeURIComponent(priority) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
        status ? 'status=' + encodeURIComponent(status) : null,
        tags
          ? 'tags=' + tags.map(String).map(encodeURIComponent).join('&tags=')
          : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function ticketsCreate(data: Ticket): Promise<Ticket> {
  const response = await axios.post(`/api/tickets/`, data);
  return response.data;
}

export async function ticketsRetrieve(id: number): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/${id}/`);
  return response.data;
}

export async function ticketsUpdate(id: number, data: Ticket): Promise<Ticket> {
  const response = await axios.put(`/api/tickets/${id}/`, data);
  return response.data;
}

export async function ticketsPartialUpdate(
  id: number,
  data: PatchedTicket,
): Promise<Ticket> {
  const response = await axios.patch(`/api/tickets/${id}/`, data);
  return response.data;
}

export async function ticketsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tickets/${id}/`);
  return response.data;
}

export async function ticketsAddCommentCreate(
  id: number,
  data: Ticket,
): Promise<Ticket> {
  const response = await axios.post(`/api/tickets/${id}/add_comment/`, data);
  return response.data;
}

export async function ticketsAssignPartialUpdate(
  id: number,
  data: PatchedTicket,
): Promise<Ticket> {
  const response = await axios.patch(`/api/tickets/${id}/assign/`, data);
  return response.data;
}

export async function ticketsCommentsRetrieve(id: number): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/${id}/comments/`);
  return response.data;
}

export async function moveTicketToColumn(id: number): Promise<Ticket> {
  const response = await axios.patch(`/api/tickets/${id}/move_to_column/`);
  return response.data;
}

export async function ticketsReorderInColumnPartialUpdate(
  id: number,
  data: PatchedTicket,
): Promise<Ticket> {
  const response = await axios.patch(
    `/api/tickets/${id}/reorder_in_column/`,
    data,
  );
  return response.data;
}

export async function ticketsAssignedToMeRetrieve(): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/assigned_to_me/`);
  return response.data;
}

export async function ticketsMyTicketsRetrieve(): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/my_tickets/`);
  return response.data;
}

export async function usersList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedUserList> {
  const response = await axios.get(
    `/api/users/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function usersCreate(data: UserCreate): Promise<UserCreate> {
  const response = await axios.post(`/api/users/`, data);
  return response.data;
}

export async function usersRetrieve(id: number): Promise<User> {
  const response = await axios.get(`/api/users/${id}/`);
  return response.data;
}

export async function usersUpdate(id: number, data: User): Promise<User> {
  const response = await axios.put(`/api/users/${id}/`, data);
  return response.data;
}

export async function usersPartialUpdate(
  id: number,
  data: PatchedUser,
): Promise<User> {
  const response = await axios.patch(`/api/users/${id}/`, data);
  return response.data;
}

export async function usersDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/users/${id}/`);
  return response.data;
}

export async function usersChangePasswordCreate(data: User): Promise<User> {
  const response = await axios.post(`/api/users/change_password/`, data);
  return response.data;
}

export async function usersLoginCreate(data: User): Promise<User> {
  const response = await axios.post(`/api/users/login/`, data);
  return response.data;
}

export async function usersLogoutCreate(data: User): Promise<User> {
  const response = await axios.post(`/api/users/logout/`, data);
  return response.data;
}

export async function usersMeRetrieve(): Promise<User> {
  const response = await axios.get(`/api/users/me/`);
  return response.data;
}
