/**
 * THIS FILE IS AUTOMATICALLY GENERATED FROM: https://api.echodesk.ge/api/schema
 * DO NOT EDIT MANUALLY
 */

import axios from '../axios';
import type {
  PaginatedCallLogList,
  CallLog,
  PatchedCallLog,
  PaginatedClientList,
  Client,
  PatchedClient,
  PaginatedTicketCommentList,
  TicketComment,
  PatchedTicketComment,
  PaginatedTagList,
  Tag,
  PatchedTag,
  PaginatedTicketListList,
  Ticket,
  PatchedTicket,
  PaginatedUserList,
  UserCreate,
  User,
  PatchedUser,
} from './interfaces';

export async function callLogsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedCallLogList> {
  const response = await axios.get(
    `/api/call-logs/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function callLogsCreate(data: CallLog): Promise<CallLog> {
  const response = await axios.post(`/api/call-logs/`, data);
  return response.data;
}

export async function callLogsRetrieve(id: number): Promise<CallLog> {
  const response = await axios.get(`/api/call-logs/${id}/`);
  return response.data;
}

export async function callLogsUpdate(
  id: number,
  data: CallLog,
): Promise<CallLog> {
  const response = await axios.put(`/api/call-logs/${id}/`, data);
  return response.data;
}

export async function callLogsPartialUpdate(
  id: number,
  data: PatchedCallLog,
): Promise<CallLog> {
  const response = await axios.patch(`/api/call-logs/${id}/`, data);
  return response.data;
}

export async function callLogsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/call-logs/${id}/`);
  return response.data;
}

export async function clientsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedClientList> {
  const response = await axios.get(
    `/api/clients/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function clientsCreate(data: Client): Promise<Client> {
  const response = await axios.post(`/api/clients/`, data);
  return response.data;
}

export async function clientsRetrieve(id: number): Promise<Client> {
  const response = await axios.get(`/api/clients/${id}/`);
  return response.data;
}

export async function clientsUpdate(id: number, data: Client): Promise<Client> {
  const response = await axios.put(`/api/clients/${id}/`, data);
  return response.data;
}

export async function clientsPartialUpdate(
  id: number,
  data: PatchedClient,
): Promise<Client> {
  const response = await axios.patch(`/api/clients/${id}/`, data);
  return response.data;
}

export async function clientsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/clients/${id}/`);
  return response.data;
}

export async function commentsList(
  ordering?: string,
  page?: number,
): Promise<PaginatedTicketCommentList> {
  const response = await axios.get(
    `/api/comments/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function commentsCreate(
  data: TicketComment,
): Promise<TicketComment> {
  const response = await axios.post(`/api/comments/`, data);
  return response.data;
}

export async function commentsRetrieve(id: string): Promise<TicketComment> {
  const response = await axios.get(`/api/comments/${id}/`);
  return response.data;
}

export async function commentsUpdate(
  id: string,
  data: TicketComment,
): Promise<TicketComment> {
  const response = await axios.put(`/api/comments/${id}/`, data);
  return response.data;
}

export async function commentsPartialUpdate(
  id: string,
  data: PatchedTicketComment,
): Promise<TicketComment> {
  const response = await axios.patch(`/api/comments/${id}/`, data);
  return response.data;
}

export async function commentsDestroy(id: string): Promise<any> {
  const response = await axios.delete(`/api/comments/${id}/`);
  return response.data;
}

export async function tagsList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedTagList> {
  const response = await axios.get(
    `/api/tags/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function tagsCreate(data: Tag): Promise<Tag> {
  const response = await axios.post(`/api/tags/`, data);
  return response.data;
}

export async function tagsRetrieve(id: number): Promise<Tag> {
  const response = await axios.get(`/api/tags/${id}/`);
  return response.data;
}

export async function tagsUpdate(id: number, data: Tag): Promise<Tag> {
  const response = await axios.put(`/api/tags/${id}/`, data);
  return response.data;
}

export async function tagsPartialUpdate(
  id: number,
  data: PatchedTag,
): Promise<Tag> {
  const response = await axios.patch(`/api/tags/${id}/`, data);
  return response.data;
}

export async function tagsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tags/${id}/`);
  return response.data;
}

export async function ticketsList(
  assignedTo?: number,
  createdBy?: number,
  ordering?: string,
  page?: number,
  priority?: 'critical' | 'high' | 'low' | 'medium',
  search?: string,
  status?: 'closed' | 'in_progress' | 'open' | 'resolved',
  tags?: number[],
): Promise<PaginatedTicketListList> {
  const response = await axios.get(
    `/api/tickets/${(() => {
      const parts = [
        assignedTo ? 'assigned_to=' + encodeURIComponent(assignedTo) : null,
        createdBy ? 'created_by=' + encodeURIComponent(createdBy) : null,
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        priority ? 'priority=' + encodeURIComponent(priority) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
        status ? 'status=' + encodeURIComponent(status) : null,
        tags
          ? 'tags=' + tags.map(String).map(encodeURIComponent).join('&tags=')
          : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function ticketsCreate(data: Ticket): Promise<Ticket> {
  const response = await axios.post(`/api/tickets/`, data);
  return response.data;
}

export async function ticketsRetrieve(id: number): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/${id}/`);
  return response.data;
}

export async function ticketsUpdate(id: number, data: Ticket): Promise<Ticket> {
  const response = await axios.put(`/api/tickets/${id}/`, data);
  return response.data;
}

export async function ticketsPartialUpdate(
  id: number,
  data: PatchedTicket,
): Promise<Ticket> {
  const response = await axios.patch(`/api/tickets/${id}/`, data);
  return response.data;
}

export async function ticketsDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/tickets/${id}/`);
  return response.data;
}

export async function ticketsAddCommentCreate(
  id: number,
  data: Ticket,
): Promise<Ticket> {
  const response = await axios.post(`/api/tickets/${id}/add_comment/`, data);
  return response.data;
}

export async function ticketsAssignPartialUpdate(
  id: number,
  data: PatchedTicket,
): Promise<Ticket> {
  const response = await axios.patch(`/api/tickets/${id}/assign/`, data);
  return response.data;
}

export async function ticketsCommentsRetrieve(id: number): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/${id}/comments/`);
  return response.data;
}

export async function ticketsAssignedToMeRetrieve(): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/assigned_to_me/`);
  return response.data;
}

export async function ticketsMyTicketsRetrieve(): Promise<Ticket> {
  const response = await axios.get(`/api/tickets/my_tickets/`);
  return response.data;
}

export async function usersList(
  ordering?: string,
  page?: number,
  search?: string,
): Promise<PaginatedUserList> {
  const response = await axios.get(
    `/api/users/${(() => {
      const parts = [
        ordering ? 'ordering=' + encodeURIComponent(ordering) : null,
        page ? 'page=' + encodeURIComponent(page) : null,
        search ? 'search=' + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? '?' + parts.join('&') : '';
    })()}`,
  );
  return response.data;
}

export async function usersCreate(data: UserCreate): Promise<UserCreate> {
  const response = await axios.post(`/api/users/`, data);
  return response.data;
}

export async function usersRetrieve(id: number): Promise<User> {
  const response = await axios.get(`/api/users/${id}/`);
  return response.data;
}

export async function usersUpdate(id: number, data: User): Promise<User> {
  const response = await axios.put(`/api/users/${id}/`, data);
  return response.data;
}

export async function usersPartialUpdate(
  id: number,
  data: PatchedUser,
): Promise<User> {
  const response = await axios.patch(`/api/users/${id}/`, data);
  return response.data;
}

export async function usersDestroy(id: number): Promise<any> {
  const response = await axios.delete(`/api/users/${id}/`);
  return response.data;
}

export async function usersChangePasswordCreate(data: User): Promise<User> {
  const response = await axios.post(`/api/users/change_password/`, data);
  return response.data;
}

export async function usersLoginCreate(data: User): Promise<User> {
  const response = await axios.post(`/api/users/login/`, data);
  return response.data;
}

export async function usersLogoutCreate(data: User): Promise<User> {
  const response = await axios.post(`/api/users/logout/`, data);
  return response.data;
}

export async function usersMeRetrieve(): Promise<User> {
  const response = await axios.get(`/api/users/me/`);
  return response.data;
}
